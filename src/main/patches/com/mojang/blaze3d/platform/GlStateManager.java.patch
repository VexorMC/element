--- GlStateManager.java
+++ GlStateManager.java
@@ -1,31 +1,33 @@
 package com.mojang.blaze3d.platform;
 
 import java.nio.FloatBuffer;
+
+import com.mojang.blaze3d.platform.modern.GLX;
 import org.lwjgl.opengl.GL11;
 
 public class GlStateManager {
-	private static GlStateManager.AlphaTestState ALPHA_TEST = new GlStateManager.AlphaTestState();
-	private static GlStateManager.BooleanState LIGHTING = new GlStateManager.BooleanState(2896);
-	private static GlStateManager.BooleanState[] LIGHTING_STATES = new GlStateManager.BooleanState[8];
-	private static GlStateManager.ColorMaterialState COLOR_MATERIAL = new GlStateManager.ColorMaterialState();
-	private static GlStateManager.BlendFuncState BLEND = new GlStateManager.BlendFuncState();
-	private static GlStateManager.DepthTestState DEPTH = new GlStateManager.DepthTestState();
-	private static GlStateManager.FogState FOG = new GlStateManager.FogState();
-	private static GlStateManager.CullFaceState CULL = new GlStateManager.CullFaceState();
-	private static GlStateManager.PolygonOffsetState POLY_OFFSET = new GlStateManager.PolygonOffsetState();
-	private static GlStateManager.LogicOpState COLOR_LOGIC = new GlStateManager.LogicOpState();
-	private static GlStateManager.TexGenState TEX_GEN = new GlStateManager.TexGenState();
-	private static GlStateManager.ClearState CLEAR = new GlStateManager.ClearState();
+	private static final GlStateManager.AlphaTestState ALPHA_TEST = new GlStateManager.AlphaTestState();
+	private static final GlStateManager.BooleanState LIGHTING = new GlStateManager.BooleanState(2896);
+	private static final GlStateManager.BooleanState[] LIGHTING_STATES = new GlStateManager.BooleanState[8];
+	private static final GlStateManager.ColorMaterialState COLOR_MATERIAL = new GlStateManager.ColorMaterialState();
+	private static final GlStateManager.BlendFuncState BLEND = new GlStateManager.BlendFuncState();
+	private static final GlStateManager.DepthTestState DEPTH = new GlStateManager.DepthTestState();
+	private static final GlStateManager.FogState FOG = new GlStateManager.FogState();
+	private static final GlStateManager.CullFaceState CULL = new GlStateManager.CullFaceState();
+	private static final GlStateManager.PolygonOffsetState POLY_OFFSET = new GlStateManager.PolygonOffsetState();
+	private static final GlStateManager.LogicOpState COLOR_LOGIC = new GlStateManager.LogicOpState();
+	private static final GlStateManager.TexGenState TEX_GEN = new GlStateManager.TexGenState();
+	private static final GlStateManager.ClearState CLEAR = new GlStateManager.ClearState();
 	private static GlStateManager.StencilState STENCIL = new GlStateManager.StencilState();
-	private static GlStateManager.BooleanState NORMALIZE = new GlStateManager.BooleanState(2977);
+	private static final GlStateManager.BooleanState NORMALIZE = new GlStateManager.BooleanState(2977);
 	private static int activeTexture = 0;
-	private static GlStateManager.Texture2DState[] TEXTURES = new GlStateManager.Texture2DState[8];
+	private static final GlStateManager.Texture2DState[] TEXTURES = new GlStateManager.Texture2DState[8];
 	private static int modelShadeMode = 7425;
-	private static GlStateManager.BooleanState RESCALE_NORMAL = new GlStateManager.BooleanState(32826);
-	private static GlStateManager.ColorMask COLOR_MASK = new GlStateManager.ColorMask();
-	private static GlStateManager.Color4 COLOR = new GlStateManager.Color4();
+	private static final GlStateManager.BooleanState RESCALE_NORMAL = new GlStateManager.BooleanState(32826);
+	private static final GlStateManager.ColorMask COLOR_MASK = new GlStateManager.ColorMask();
+	private static final GlStateManager.Color4 COLOR = new GlStateManager.Color4();
 
 	public static void pushLightingAttributes() {
 		GL11.glPushAttrib(8256);
 	}
 
@@ -123,11 +125,11 @@
 		if (i != BLEND.srcFactorRGB || j != BLEND.dstFactorRGB || k != BLEND.srcFactorAlpha || l != BLEND.dstFactorAlpha) {
 			BLEND.srcFactorRGB = i;
 			BLEND.dstFactorRGB = j;
 			BLEND.srcFactorAlpha = k;
 			BLEND.dstFactorAlpha = l;
-			GLX.glBlendFuncSeparate(i, j, k, l);
+			com.mojang.blaze3d.platform.GLX.glBlendFuncSeparate(i, j, k, l);
 		}
 	}
 
 	public static void enableFog() {
 		FOG.capState.enable();
@@ -226,11 +228,11 @@
 			GL11.glTexGeni(texGenCoordState.coord, 9472, i);
 		}
 	}
 
 	public static void genTex(GlStateManager.TexCoord texCoord, int i, FloatBuffer floatBuffer) {
-		GL11.glTexGen(getGenCoordState(texCoord).coord, i, floatBuffer);
+		GL11.glTexGenfv(getGenCoordState(texCoord).coord, i, floatBuffer);
 	}
 
 	private static GlStateManager.TexGenCoordState getGenCoordState(GlStateManager.TexCoord texCoord) {
 		switch (texCoord) {
 			case S:
@@ -245,13 +247,13 @@
 				return TEX_GEN.s;
 		}
 	}
 
 	public static void activeTexture(int i) {
-		if (activeTexture != i - GLX.textureUnit) {
-			activeTexture = i - GLX.textureUnit;
-			GLX.gl13ActiveTexture(i);
+		if (activeTexture != i - com.mojang.blaze3d.platform.GLX.textureUnit) {
+			activeTexture = i - com.mojang.blaze3d.platform.GLX.textureUnit;
+			com.mojang.blaze3d.platform.GLX.gl13ActiveTexture(i);
 		}
 	}
 
 	public static void enableTexture() {
 		TEXTURES[activeTexture].capState.enable();
@@ -355,11 +357,11 @@
 	public static void popMatrix() {
 		GL11.glPopMatrix();
 	}
 
 	public static void getFloat(int i, FloatBuffer floatBuffer) {
-		GL11.glGetFloat(i, floatBuffer);
+		GL11.glGetFloatv(i, floatBuffer);
 	}
 
 	public static void ortho(double d, double e, double f, double g, double h, double i) {
 		GL11.glOrtho(d, e, f, g, h, i);
 	}
@@ -383,11 +385,11 @@
 	public static void translate(double d, double e, double f) {
 		GL11.glTranslated(d, e, f);
 	}
 
 	public static void multiMatrix(FloatBuffer floatBuffer) {
-		GL11.glMultMatrix(floatBuffer);
+		GL11.glMultMatrixf(floatBuffer);
 	}
 
 	public static void color(float f, float g, float h, float i) {
 		if (f != COLOR.red || g != COLOR.green || h != COLOR.blue || i != COLOR.alpha) {
 			COLOR.red = f;
