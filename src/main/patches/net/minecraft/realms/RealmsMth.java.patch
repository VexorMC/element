--- RealmsMth.java
+++ RealmsMth.java
@@ -1,139 +1,139 @@
 package net.minecraft.realms;
 
 import java.util.Random;
-import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.Mth;
 import org.apache.commons.lang3.StringUtils;
 
 public class RealmsMth {
 	public static float sin(float f) {
-		return MathHelper.sin(f);
+		return Mth.sin(f);
 	}
 
 	public static double nextDouble(Random random, double d, double e) {
-		return MathHelper.nextDouble(random, d, e);
+		return Mth.nextDouble(random, d, e);
 	}
 
 	public static int ceil(float f) {
-		return MathHelper.ceil(f);
+		return Mth.ceil(f);
 	}
 
 	public static int floor(double d) {
-		return MathHelper.floor(d);
+		return Mth.floor(d);
 	}
 
 	public static int intFloorDiv(int i, int j) {
-		return MathHelper.floorDiv(i, j);
+		return Mth.floorDiv(i, j);
 	}
 
 	public static float abs(float f) {
-		return MathHelper.abs(f);
+		return Mth.abs(f);
 	}
 
 	public static int clamp(int i, int j, int k) {
-		return MathHelper.clamp(i, j, k);
+		return Mth.clamp(i, j, k);
 	}
 
 	public static double clampedLerp(double d, double e, double f) {
-		return MathHelper.clampedLerp(d, e, f);
+		return Mth.clampedLerp(d, e, f);
 	}
 
 	public static int ceil(double d) {
-		return MathHelper.ceil(d);
+		return Mth.ceil(d);
 	}
 
 	public static boolean isEmpty(String string) {
 		return StringUtils.isEmpty(string);
 	}
 
 	public static long lfloor(double d) {
-		return MathHelper.lfloor(d);
+		return Mth.lfloor(d);
 	}
 
 	public static float sqrt(double d) {
-		return MathHelper.sqrt(d);
+		return Mth.sqrt(d);
 	}
 
 	public static double clamp(double d, double e, double f) {
-		return MathHelper.clamp(d, e, f);
+		return Mth.clamp(d, e, f);
 	}
 
 	public static int getInt(String string, int i) {
-		return MathHelper.parseInt(string, i);
+		return Mth.parseInt(string, i);
 	}
 
 	public static double getDouble(String string, double d) {
-		return MathHelper.parseDouble(string, d);
+		return Mth.parseDouble(string, d);
 	}
 
 	public static int log2(int i) {
-		return MathHelper.log2(i);
+		return Mth.log2(i);
 	}
 
 	public static int absFloor(double d) {
-		return MathHelper.absFloor(d);
+		return Mth.absFloor(d);
 	}
 
 	public static int smallestEncompassingPowerOfTwo(int i) {
-		return MathHelper.smallestEncompassingPowerOfTwo(i);
+		return Mth.smallestEncompassingPowerOfTwo(i);
 	}
 
 	public static float sqrt(float f) {
-		return MathHelper.sqrt(f);
+		return Mth.sqrt(f);
 	}
 
 	public static float cos(float f) {
-		return MathHelper.cos(f);
+		return Mth.cos(f);
 	}
 
 	public static int getInt(String string, int i, int j) {
-		return MathHelper.parseInt(string, i, j);
+		return Mth.parseInt(string, i, j);
 	}
 
 	public static int fastFloor(double d) {
-		return MathHelper.fastFloor(d);
+		return Mth.fastFloor(d);
 	}
 
 	public static double absMax(double d, double e) {
-		return MathHelper.absMax(d, e);
+		return Mth.absMax(d, e);
 	}
 
 	public static float nextFloat(Random random, float f, float g) {
-		return MathHelper.nextFloat(random, f, g);
+		return Mth.nextFloat(random, f, g);
 	}
 
 	public static double wrapDegrees(double d) {
-		return MathHelper.wrapDegrees(d);
+		return Mth.wrapDegrees(d);
 	}
 
 	public static float wrapDegrees(float f) {
-		return MathHelper.wrapDegrees(f);
+		return Mth.wrapDegrees(f);
 	}
 
 	public static float clamp(float f, float g, float h) {
-		return MathHelper.clamp(f, g, h);
+		return Mth.clamp(f, g, h);
 	}
 
 	public static double getDouble(String string, double d, double e) {
-		return MathHelper.parseDouble(string, d, e);
+		return Mth.parseDouble(string, d, e);
 	}
 
 	public static int roundUp(int i, int j) {
-		return MathHelper.roundUp(i, j);
+		return Mth.roundUp(i, j);
 	}
 
 	public static double average(long[] ls) {
-		return MathHelper.average(ls);
+		return Mth.average(ls);
 	}
 
 	public static int floor(float f) {
-		return MathHelper.floor(f);
+		return Mth.floor(f);
 	}
 
 	public static int abs(int i) {
-		return MathHelper.abs(i);
+		return Mth.abs(i);
 	}
 
 	public static int nextInt(Random random, int i, int j) {
-		return MathHelper.nextInt(random, i, j);
+		return Mth.nextInt(random, i, j);
 	}
 }
