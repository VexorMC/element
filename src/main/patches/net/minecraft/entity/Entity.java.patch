--- Entity.java
+++ Entity.java
@@ -575,12 +575,12 @@
 
 				if (block != null && this.onGround) {
 					block.onSteppedOn(this.world, blockPos, this);
 				}
 
-				this.horizontalSpeed = (float)((double)this.horizontalSpeed + (double)MathHelper.sqrt(ab * ab + ad * ad) * 0.6);
-				this.distanceTraveled = (float)((double)this.distanceTraveled + (double)MathHelper.sqrt(ab * ab + ac * ac + ad * ad) * 0.6);
+				this.horizontalSpeed = (float)((double)this.horizontalSpeed + (double) MathHelper.sqrt(ab * ab + ad * ad) * 0.6);
+				this.distanceTraveled = (float)((double)this.distanceTraveled + (double) MathHelper.sqrt(ab * ab + ac * ac + ad * ad) * 0.6);
 				if (this.distanceTraveled > (float)this.field_3233 && block.getMaterial() != Material.AIR) {
 					this.field_3233 = (int)this.distanceTraveled + 1;
 					if (this.isTouchingWater()) {
 						float ae = MathHelper.sqrt(this.velocityX * this.velocityX * 0.2F + this.velocityY * this.velocityY + this.velocityZ * this.velocityZ * 0.2F) * 0.35F;
 						if (ae > 1.0F) {
@@ -754,11 +754,11 @@
 		if (f > 1.0F) {
 			f = 1.0F;
 		}
 
 		this.playSound(this.getSplashSound(), f, 1.0F + (this.random.nextFloat() - this.random.nextFloat()) * 0.4F);
-		float g = (float)MathHelper.floor(this.getBoundingBox().minY);
+		float g = (float) MathHelper.floor(this.getBoundingBox().minY);
 
 		for (int i = 0; (float)i < 1.0F + this.width * 20.0F; i++) {
 			float h = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
 			float j = (this.random.nextFloat() * 2.0F - 1.0F) * this.width;
 			this.world
@@ -919,11 +919,11 @@
 
 	public double distanceTo(double d, double e, double f) {
 		double g = this.x - d;
 		double h = this.y - e;
 		double i = this.z - f;
-		return (double)MathHelper.sqrt(g * g + h * h + i * i);
+		return (double) MathHelper.sqrt(g * g + h * h + i * i);
 	}
 
 	public double squaredDistanceTo(Entity entity) {
 		double d = this.x - entity.x;
 		double e = this.y - entity.y;
@@ -939,11 +939,11 @@
 			if (!entity.noClip && !this.noClip) {
 				double d = entity.x - this.x;
 				double e = entity.z - this.z;
 				double f = MathHelper.absMax(d, e);
 				if (f >= 0.01F) {
-					f = (double)MathHelper.sqrt(f);
+					f = (double) MathHelper.sqrt(f);
 					d /= f;
 					e /= f;
 					double g = 1.0 / f;
 					if (g > 1.0) {
 						g = 1.0;
@@ -1718,11 +1718,11 @@
 			}
 		});
 		crashReportSection.add("Entity's Exact location", String.format("%.2f, %.2f, %.2f", this.x, this.y, this.z));
 		crashReportSection.add(
 			"Entity's Block location",
-			CrashReportSection.createPositionString((double)MathHelper.floor(this.x), (double)MathHelper.floor(this.y), (double)MathHelper.floor(this.z))
+			CrashReportSection.createPositionString((double) MathHelper.floor(this.x), (double) MathHelper.floor(this.y), (double) MathHelper.floor(this.z))
 		);
 		crashReportSection.add("Entity's Momentum", String.format("%.2f, %.2f, %.2f", this.velocityX, this.velocityY, this.velocityZ));
 		crashReportSection.add("Entity's Rider", new Callable<String>() {
 			public String call() throws Exception {
 				return Entity.this.rider.toString();
