--- ThrowableEntity.java
+++ ThrowableEntity.java
@@ -13,11 +13,11 @@
 import net.minecraft.server.world.ServerWorld;
 import net.minecraft.util.Identifier;
 import net.minecraft.util.hit.BlockHitResult;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Box;
-import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.Mth;
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.World;
 
 public abstract class ThrowableEntity extends Entity implements Projectile {
 	private int blockX = -1;
@@ -54,18 +54,18 @@
 	public ThrowableEntity(World world, LivingEntity livingEntity) {
 		super(world);
 		this.field_6932 = livingEntity;
 		this.setBounds(0.25F, 0.25F);
 		this.refreshPositionAndAngles(livingEntity.x, livingEntity.y + (double)livingEntity.getEyeHeight(), livingEntity.z, livingEntity.yaw, livingEntity.pitch);
-		this.x = this.x - (double)(MathHelper.cos(this.yaw / 180.0F * (float) Math.PI) * 0.16F);
+		this.x = this.x - (double)(Mth.cos(this.yaw / 180.0F * (float) Math.PI) * 0.16F);
 		this.y -= 0.1F;
-		this.z = this.z - (double)(MathHelper.sin(this.yaw / 180.0F * (float) Math.PI) * 0.16F);
+		this.z = this.z - (double)(Mth.sin(this.yaw / 180.0F * (float) Math.PI) * 0.16F);
 		this.updatePosition(this.x, this.y, this.z);
 		float f = 0.4F;
-		this.velocityX = (double)(-MathHelper.sin(this.yaw / 180.0F * (float) Math.PI) * MathHelper.cos(this.pitch / 180.0F * (float) Math.PI) * f);
-		this.velocityZ = (double)(MathHelper.cos(this.yaw / 180.0F * (float) Math.PI) * MathHelper.cos(this.pitch / 180.0F * (float) Math.PI) * f);
-		this.velocityY = (double)(-MathHelper.sin((this.pitch + this.method_3235()) / 180.0F * (float) Math.PI) * f);
+		this.velocityX = (double)(-Mth.sin(this.yaw / 180.0F * (float) Math.PI) * Mth.cos(this.pitch / 180.0F * (float) Math.PI) * f);
+		this.velocityZ = (double)(Mth.cos(this.yaw / 180.0F * (float) Math.PI) * Mth.cos(this.pitch / 180.0F * (float) Math.PI) * f);
+		this.velocityY = (double)(-Mth.sin((this.pitch + this.method_3235()) / 180.0F * (float) Math.PI) * f);
 		this.setVelocity(this.velocityX, this.velocityY, this.velocityZ, this.method_3234(), 1.0F);
 	}
 
 	public ThrowableEntity(World world, double d, double e, double f) {
 		super(world);
@@ -82,11 +82,11 @@
 		return 0.0F;
 	}
 
 	@Override
 	public void setVelocity(double d, double e, double f, float g, float h) {
-		float i = MathHelper.sqrt(d * d + e * e + f * f);
+		float i = Mth.sqrt(d * d + e * e + f * f);
 		d /= (double)i;
 		e /= (double)i;
 		f /= (double)i;
 		d += this.random.nextGaussian() * 0.0075F * (double)h;
 		e += this.random.nextGaussian() * 0.0075F * (double)h;
@@ -95,25 +95,25 @@
 		e *= (double)g;
 		f *= (double)g;
 		this.velocityX = d;
 		this.velocityY = e;
 		this.velocityZ = f;
-		float j = MathHelper.sqrt(d * d + f * f);
-		this.prevYaw = this.yaw = (float)(MathHelper.atan2(d, f) * 180.0 / (float) Math.PI);
-		this.prevPitch = this.pitch = (float)(MathHelper.atan2(e, (double)j) * 180.0 / (float) Math.PI);
+		float j = Mth.sqrt(d * d + f * f);
+		this.prevYaw = this.yaw = (float)(Mth.atan2(d, f) * 180.0 / (float) Math.PI);
+		this.prevPitch = this.pitch = (float)(Mth.atan2(e, (double)j) * 180.0 / (float) Math.PI);
 		this.inGroundTime = 0;
 	}
 
 	@Override
 	public void setVelocityClient(double d, double e, double f) {
 		this.velocityX = d;
 		this.velocityY = e;
 		this.velocityZ = f;
 		if (this.prevPitch == 0.0F && this.prevYaw == 0.0F) {
-			float g = MathHelper.sqrt(d * d + f * f);
-			this.prevYaw = this.yaw = (float)(MathHelper.atan2(d, f) * 180.0 / (float) Math.PI);
-			this.prevPitch = this.pitch = (float)(MathHelper.atan2(e, (double)g) * 180.0 / (float) Math.PI);
+			float g = Mth.sqrt(d * d + f * f);
+			this.prevYaw = this.yaw = (float)(Mth.atan2(d, f) * 180.0 / (float) Math.PI);
+			this.prevPitch = this.pitch = (float)(Mth.atan2(e, (double)g) * 180.0 / (float) Math.PI);
 		}
 	}
 
 	@Override
 	public void tick() {
@@ -190,13 +190,13 @@
 		}
 
 		this.x = this.x + this.velocityX;
 		this.y = this.y + this.velocityY;
 		this.z = this.z + this.velocityZ;
-		float g = MathHelper.sqrt(this.velocityX * this.velocityX + this.velocityZ * this.velocityZ);
-		this.yaw = (float)(MathHelper.atan2(this.velocityX, this.velocityZ) * 180.0 / (float) Math.PI);
-		this.pitch = (float)(MathHelper.atan2(this.velocityY, (double)g) * 180.0 / (float) Math.PI);
+		float g = Mth.sqrt(this.velocityX * this.velocityX + this.velocityZ * this.velocityZ);
+		this.yaw = (float)(Mth.atan2(this.velocityX, this.velocityZ) * 180.0 / (float) Math.PI);
+		this.pitch = (float)(Mth.atan2(this.velocityY, (double)g) * 180.0 / (float) Math.PI);
 
 		while (this.pitch - this.prevPitch < -180.0F) {
 			this.prevPitch -= 360.0F;
 		}
 
