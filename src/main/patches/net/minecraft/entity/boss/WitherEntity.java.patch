--- WitherEntity.java
+++ WitherEntity.java
@@ -31,21 +31,21 @@
 import net.minecraft.entity.projectile.AbstractArrowEntity;
 import net.minecraft.entity.projectile.WitherSkullEntity;
 import net.minecraft.item.Items;
 import net.minecraft.nbt.NbtCompound;
 import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.Mth;
 import net.minecraft.world.Difficulty;
 import net.minecraft.world.World;
 
 public class WitherEntity extends HostileEntity implements BossBarProvider, RangedAttackMob {
-	private float[] sideHeadPitches = new float[2];
-	private float[] sideHeadYaws = new float[2];
-	private float[] prevSideHeadPitches = new float[2];
-	private float[] prevSideHeadYaws = new float[2];
-	private int[] field_5376 = new int[2];
-	private int[] field_5377 = new int[2];
+	private final float[] sideHeadPitches = new float[2];
+	private final float[] sideHeadYaws = new float[2];
+	private final float[] prevSideHeadPitches = new float[2];
+	private final float[] prevSideHeadYaws = new float[2];
+	private final int[] field_5376 = new int[2];
+	private final int[] field_5377 = new int[2];
 	private int field_5378;
 	private static final Predicate<Entity> CAN_ATTACK_PREDICATE = new Predicate<Entity>() {
 		public boolean apply(Entity entity) {
 			return entity instanceof LivingEntity && ((LivingEntity)entity).getGroup() != EntityGroup.UNDEAD;
 		}
@@ -61,21 +61,21 @@
 		this.goals.add(2, new ProjectileAttackGoal(this, 1.0, 40, 20.0F));
 		this.goals.add(5, new WanderAroundGoal(this, 1.0));
 		this.goals.add(6, new LookAtEntityGoal(this, PlayerEntity.class, 8.0F));
 		this.goals.add(7, new LookAroundGoal(this));
 		this.attackGoals.add(1, new RevengeGoal(this, false));
-		this.attackGoals.add(2, new FollowTargetGoal(this, MobEntity.class, 0, false, false, CAN_ATTACK_PREDICATE));
+		this.attackGoals.add(2, new FollowTargetGoal<>(this, MobEntity.class, 0, false, false, CAN_ATTACK_PREDICATE));
 		this.experiencePoints = 50;
 	}
 
 	@Override
 	protected void initDataTracker() {
 		super.initDataTracker();
-		this.dataTracker.track(17, new Integer(0));
-		this.dataTracker.track(18, new Integer(0));
-		this.dataTracker.track(19, new Integer(0));
-		this.dataTracker.track(20, new Integer(0));
+		this.dataTracker.track(17, 0);
+		this.dataTracker.track(18, 0);
+		this.dataTracker.track(19, 0);
+		this.dataTracker.track(20, 0);
 	}
 
 	@Override
 	public void writeCustomDataToNbt(NbtCompound nbtCompound) {
 		super.writeCustomDataToNbt(nbtCompound);
@@ -119,19 +119,19 @@
 
 				double d = entity.x - this.x;
 				double e = entity.z - this.z;
 				double f = d * d + e * e;
 				if (f > 9.0) {
-					double g = (double)MathHelper.sqrt(f);
+					double g = (double) Mth.sqrt(f);
 					this.velocityX = this.velocityX + (d / g * 0.5 - this.velocityX) * 0.6F;
 					this.velocityZ = this.velocityZ + (e / g * 0.5 - this.velocityZ) * 0.6F;
 				}
 			}
 		}
 
 		if (this.velocityX * this.velocityX + this.velocityZ * this.velocityZ > 0.05F) {
-			this.yaw = (float)MathHelper.atan2(this.velocityZ, this.velocityX) * (180.0F / (float)Math.PI) - 90.0F;
+			this.yaw = (float) Mth.atan2(this.velocityZ, this.velocityX) * (180.0F / (float)Math.PI) - 90.0F;
 		}
 
 		super.tickMovement();
 
 		for (int i = 0; i < 2; i++) {
@@ -151,13 +151,13 @@
 				double f = this.getHeadY(i + 1);
 				double g = this.getHeadZ(i + 1);
 				double h = entity2.x - e;
 				double k = entity2.y + (double)entity2.getEyeHeight() - f;
 				double l = entity2.z - g;
-				double m = (double)MathHelper.sqrt(h * h + l * l);
-				float n = (float)(MathHelper.atan2(l, h) * 180.0 / (float) Math.PI) - 90.0F;
-				float o = (float)(-(MathHelper.atan2(k, m) * 180.0 / (float) Math.PI));
+				double m = Mth.sqrt(h * h + l * l);
+				float n = (float)(Mth.atan2(l, h) * 180.0 / (float) Math.PI) - 90.0F;
+				float o = (float)(-(Mth.atan2(k, m) * 180.0 / (float) Math.PI));
 				this.sideHeadPitches[i] = this.getNextAngle(this.sideHeadPitches[i], o, 40.0F);
 				this.sideHeadYaws[i] = this.getNextAngle(this.sideHeadYaws[i], n, 10.0F);
 			} else {
 				this.sideHeadYaws[i] = this.getNextAngle(this.sideHeadYaws[i], this.bodyYaw, 10.0F);
 			}
@@ -190,13 +190,13 @@
 		if (this.getInvulnerabilityTime() > 0) {
 			for (int jxx = 0; jxx < 3; jxx++) {
 				this.world
 					.addParticle(
 						ParticleType.MOB_SPELL,
-						this.x + this.random.nextGaussian() * 1.0,
+						this.x + this.random.nextGaussian(),
 						this.y + (double)(this.random.nextFloat() * 3.3F),
-						this.z + this.random.nextGaussian() * 1.0,
+						this.z + this.random.nextGaussian(),
 						0.7F,
 						0.7F,
 						0.9F
 					);
 			}
@@ -223,13 +223,13 @@
 				if (this.ticksAlive >= this.field_5376[ix - 1]) {
 					this.field_5376[ix - 1] = this.ticksAlive + 10 + this.random.nextInt(10);
 					if ((this.world.getGlobalDifficulty() == Difficulty.NORMAL || this.world.getGlobalDifficulty() == Difficulty.HARD) && this.field_5377[ix - 1]++ > 15) {
 						float f = 10.0F;
 						float g = 5.0F;
-						double d = MathHelper.nextDouble(this.random, this.x - (double)f, this.x + (double)f);
-						double e = MathHelper.nextDouble(this.random, this.y - (double)g, this.y + (double)g);
-						double h = MathHelper.nextDouble(this.random, this.z - (double)f, this.z + (double)f);
+						double d = Mth.nextDouble(this.random, this.x - (double)f, this.x + (double)f);
+						double e = Mth.nextDouble(this.random, this.y - (double)g, this.y + (double)g);
+						double h = Mth.nextDouble(this.random, this.z - (double)f, this.z + (double)f);
 						this.shootSkullAt(ix + 1, d, e, h, true);
 						this.field_5377[ix - 1] = 0;
 					}
 
 					int j = this.getTrackedEntityId(ix);
@@ -276,13 +276,13 @@
 			}
 
 			if (this.field_5378 > 0) {
 				this.field_5378--;
 				if (this.field_5378 == 0 && this.world.getGameRules().getBoolean("mobGriefing")) {
-					int ixx = MathHelper.floor(this.y);
-					int j = MathHelper.floor(this.x);
-					int l = MathHelper.floor(this.z);
+					int ixx = Mth.floor(this.y);
+					int j = Mth.floor(this.x);
+					int l = Mth.floor(this.z);
 					boolean bl = false;
 
 					for (int m = -1; m <= 1; m++) {
 						for (int n = -1; n <= 1; n++) {
 							for (int o = 0; o <= 3; o++) {
@@ -331,11 +331,11 @@
 	private double getHeadX(int i) {
 		if (i <= 0) {
 			return this.x;
 		} else {
 			float f = (this.bodyYaw + (float)(180 * (i - 1))) / 180.0F * (float) Math.PI;
-			float g = MathHelper.cos(f);
+			float g = Mth.cos(f);
 			return this.x + (double)g * 1.3;
 		}
 	}
 
 	private double getHeadY(int i) {
@@ -345,17 +345,17 @@
 	private double getHeadZ(int i) {
 		if (i <= 0) {
 			return this.z;
 		} else {
 			float f = (this.bodyYaw + (float)(180 * (i - 1))) / 180.0F * (float) Math.PI;
-			float g = MathHelper.sin(f);
+			float g = Mth.sin(f);
 			return this.z + (double)g * 1.3;
 		}
 	}
 
 	private float getNextAngle(float f, float g, float h) {
-		float i = MathHelper.wrapDegrees(g - f);
+		float i = Mth.wrapDegrees(g - f);
 		if (i > h) {
 			i = h;
 		}
 
 		if (i < -h) {
@@ -408,11 +408,11 @@
 					return false;
 				}
 			}
 
 			Entity entity = damageSource.getAttacker();
-			if (entity != null && !(entity instanceof PlayerEntity) && entity instanceof LivingEntity && ((LivingEntity)entity).getGroup() == this.getGroup()) {
+			if (!(entity instanceof PlayerEntity) && entity instanceof LivingEntity && ((LivingEntity) entity).getGroup() == this.getGroup()) {
 				return false;
 			} else {
 				if (this.field_5378 <= 0) {
 					this.field_5378 = 20;
 				}
