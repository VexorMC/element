--- DefaultResourcePack.java
+++ DefaultResourcePack.java
@@ -5,12 +5,16 @@
 import java.io.File;
 import java.io.FileInputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.util.Map;
-import java.util.Set;
+import java.net.URL;
+import java.net.URLDecoder;
+import java.util.*;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
 import net.minecraft.client.resource.ResourceMetadataProvider;
 import net.minecraft.client.texture.TextureUtil;
 import net.minecraft.util.Identifier;
 import net.minecraft.util.MetadataSerializer;
 
@@ -72,9 +76,75 @@
 	public BufferedImage getIcon() throws IOException {
 		return TextureUtil.create(DefaultResourcePack.class.getResourceAsStream("/" + new Identifier("pack.png").getPath()));
 	}
 
 	@Override
+	public List<Identifier> getAllResources() throws IOException {
+		Set<Identifier> identifiers = new HashSet<>();
+
+		for (String path : assetsIndex.keySet()) {
+			Identifier id = Identifier.parse(path);
+			if (id != null) {
+				identifiers.add(id);
+			}
+		}
+
+		URL root = DefaultResourcePack.class.getResource("/assets/");
+		if (root != null) {
+			try {
+				if (root.getProtocol().equals("file")) {
+					// Running from filesystem (IDE)
+					File assetsDir = new File(root.toURI());
+					scanAssetDirectory(assetsDir, "assets", identifiers);
+				} else if (root.getProtocol().equals("jar")) {
+					String path = root.getPath();
+					String jarPath = path.substring(5, path.indexOf("!"));
+					try (JarFile jarFile = new JarFile(URLDecoder.decode(jarPath, "UTF-8"))) {
+						Enumeration<JarEntry> entries = jarFile.entries();
+						while (entries.hasMoreElements()) {
+							JarEntry entry = entries.nextElement();
+							String name = entry.getName();
+							if (name.startsWith("assets/") && !entry.isDirectory()) {
+								String[] parts = name.split("/", 3);
+								if (parts.length == 3) {
+									String namespace = parts[1];
+									String filePath = parts[2];
+									identifiers.add(new Identifier(namespace, filePath));
+								}
+							}
+						}
+					}
+				}
+			} catch (Exception e) {
+				e.printStackTrace();
+			}
+		}
+
+		return new ArrayList<>(identifiers);
+	}
+
+	private void scanAssetDirectory(File dir, String basePath, Set<Identifier> output) {
+		File[] files = dir.listFiles();
+		if (files == null) return;
+
+		for (File file : files) {
+			if (file.isDirectory()) {
+				scanAssetDirectory(file, basePath + "/" + file.getName(), output);
+			} else {
+				String[] parts = basePath.split("/", 3);
+				if (parts.length >= 3) {
+					String namespace = parts[1];
+					String relativePath = basePath.substring(("assets/" + namespace + "/").length()) + "/" + file.getName();
+					try {
+						output.add(new Identifier(namespace, relativePath));
+					} catch (IllegalArgumentException ignored) {}
+				}
+			}
+		}
+	}
+
+
+	@Override
 	public String getName() {
 		return "Default";
 	}
 }
