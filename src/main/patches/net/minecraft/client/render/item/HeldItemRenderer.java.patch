--- HeldItemRenderer.java
+++ HeldItemRenderer.java
@@ -1,9 +1,9 @@
 package net.minecraft.client.render.item;
 
-import com.mojang.blaze3d.platform.GLX;
-import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.legacy.GLX;
+import com.mojang.blaze3d.platform.legacy.GlStateManager;
 import net.minecraft.block.Block;
 import net.minecraft.block.BlockState;
 import net.minecraft.block.material.Material;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.network.AbstractClientPlayerEntity;
@@ -26,11 +26,11 @@
 import net.minecraft.item.Items;
 import net.minecraft.item.map.MapState;
 import net.minecraft.util.Identifier;
 import net.minecraft.util.UseAction;
 import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.Mth;
 import org.lwjgl.opengl.GL11;
 
 public class HeldItemRenderer {
 	private static final Identifier MAP_BACKGROUND = new Identifier("textures/map/map_background.png");
 	private static final Identifier UNDERWATER_TEXTURE = new Identifier("textures/misc/underwater.png");
@@ -100,12 +100,12 @@
 		GlStateManager.rotate((clientPlayerEntity.yaw - h) * 0.1F, 0.0F, 1.0F, 0.0F);
 	}
 
 	private float getMapAngle(float f) {
 		float g = 1.0F - f / 45.0F + 0.1F;
-		g = MathHelper.clamp(g, 0.0F, 1.0F);
-		return -MathHelper.cos(g * (float) Math.PI) * 0.5F + 0.5F;
+		g = Mth.clamp(g, 0.0F, 1.0F);
+		return -Mth.cos(g * (float) Math.PI) * 0.5F + 0.5F;
 	}
 
 	private void renderRightMapArm(PlayerEntityRenderer playerEntityRenderer) {
 		GlStateManager.pushMatrix();
 		GlStateManager.rotate(54.0F, 0.0F, 1.0F, 0.0F);
@@ -137,24 +137,24 @@
 			GlStateManager.enableCull();
 		}
 	}
 
 	private void renderMap(AbstractClientPlayerEntity abstractClientPlayerEntity, float f, float g, float h) {
-		float i = -0.4F * MathHelper.sin(MathHelper.sqrt(h) * (float) Math.PI);
-		float j = 0.2F * MathHelper.sin(MathHelper.sqrt(h) * (float) Math.PI * 2.0F);
-		float k = -0.2F * MathHelper.sin(h * (float) Math.PI);
+		float i = -0.4F * Mth.sin(Mth.sqrt(h) * (float) Math.PI);
+		float j = 0.2F * Mth.sin(Mth.sqrt(h) * (float) Math.PI * 2.0F);
+		float k = -0.2F * Mth.sin(h * (float) Math.PI);
 		GlStateManager.translate(i, j, k);
 		float l = this.getMapAngle(f);
 		GlStateManager.translate(0.0F, 0.04F, -0.72F);
 		GlStateManager.translate(0.0F, g * -1.2F, 0.0F);
 		GlStateManager.translate(0.0F, l * -0.5F, 0.0F);
 		GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
 		GlStateManager.rotate(l * -85.0F, 0.0F, 0.0F, 1.0F);
 		GlStateManager.rotate(0.0F, 1.0F, 0.0F, 0.0F);
 		this.renderMapArms(abstractClientPlayerEntity);
-		float m = MathHelper.sin(h * h * (float) Math.PI);
-		float n = MathHelper.sin(MathHelper.sqrt(h) * (float) Math.PI);
+		float m = Mth.sin(h * h * (float) Math.PI);
+		float n = Mth.sin(Mth.sqrt(h) * (float) Math.PI);
 		GlStateManager.rotate(m * -20.0F, 0.0F, 1.0F, 0.0F);
 		GlStateManager.rotate(n * -20.0F, 0.0F, 0.0F, 1.0F);
 		GlStateManager.rotate(n * -80.0F, 1.0F, 0.0F, 0.0F);
 		GlStateManager.scale(0.38F, 0.38F, 0.38F);
 		GlStateManager.rotate(90.0F, 0.0F, 1.0F, 0.0F);
@@ -177,19 +177,19 @@
 			this.client.gameRenderer.getMapRenderer().draw(mapState, false);
 		}
 	}
 
 	private void renderArm(AbstractClientPlayerEntity abstractClientPlayerEntity, float f, float g) {
-		float h = -0.3F * MathHelper.sin(MathHelper.sqrt(g) * (float) Math.PI);
-		float i = 0.4F * MathHelper.sin(MathHelper.sqrt(g) * (float) Math.PI * 2.0F);
-		float j = -0.4F * MathHelper.sin(g * (float) Math.PI);
+		float h = -0.3F * Mth.sin(Mth.sqrt(g) * (float) Math.PI);
+		float i = 0.4F * Mth.sin(Mth.sqrt(g) * (float) Math.PI * 2.0F);
+		float j = -0.4F * Mth.sin(g * (float) Math.PI);
 		GlStateManager.translate(h, i, j);
 		GlStateManager.translate(0.64000005F, -0.6F, -0.71999997F);
 		GlStateManager.translate(0.0F, f * -0.6F, 0.0F);
 		GlStateManager.rotate(45.0F, 0.0F, 1.0F, 0.0F);
-		float k = MathHelper.sin(g * g * (float) Math.PI);
-		float l = MathHelper.sin(MathHelper.sqrt(g) * (float) Math.PI);
+		float k = Mth.sin(g * g * (float) Math.PI);
+		float l = Mth.sin(Mth.sqrt(g) * (float) Math.PI);
 		GlStateManager.rotate(l * 70.0F, 0.0F, 1.0F, 0.0F);
 		GlStateManager.rotate(k * -20.0F, 0.0F, 0.0F, 1.0F);
 		this.client.getTextureManager().bindTexture(abstractClientPlayerEntity.getCapeId());
 		GlStateManager.translate(-1.0F, 3.6F, 3.5F);
 		GlStateManager.rotate(120.0F, 0.0F, 0.0F, 1.0F);
@@ -203,20 +203,20 @@
 		playerEntityRenderer.renderRightArm(this.client.player);
 		GlStateManager.enableCull();
 	}
 
 	private void translateSwingProgress(float f) {
-		float g = -0.4F * MathHelper.sin(MathHelper.sqrt(f) * (float) Math.PI);
-		float h = 0.2F * MathHelper.sin(MathHelper.sqrt(f) * (float) Math.PI * 2.0F);
-		float i = -0.2F * MathHelper.sin(f * (float) Math.PI);
+		float g = -0.4F * Mth.sin(Mth.sqrt(f) * (float) Math.PI);
+		float h = 0.2F * Mth.sin(Mth.sqrt(f) * (float) Math.PI * 2.0F);
+		float i = -0.2F * Mth.sin(f * (float) Math.PI);
 		GlStateManager.translate(g, h, i);
 	}
 
 	private void applyEatOrDrinkTransformation(AbstractClientPlayerEntity abstractClientPlayerEntity, float f) {
 		float g = (float)abstractClientPlayerEntity.getItemUseTicks() - f + 1.0F;
 		float h = g / (float)this.mainHand.getMaxUseTime();
-		float i = MathHelper.abs(MathHelper.cos(g / 4.0F * (float) Math.PI) * 0.1F);
+		float i = Mth.abs(Mth.cos(g / 4.0F * (float) Math.PI) * 0.1F);
 		if (h >= 0.8F) {
 			i = 0.0F;
 		}
 
 		GlStateManager.translate(0.0F, i, 0.0F);
@@ -229,12 +229,12 @@
 
 	private void applyEquipAndSwingOffset(float f, float g) {
 		GlStateManager.translate(0.56F, -0.52F, -0.71999997F);
 		GlStateManager.translate(0.0F, f * -0.6F, 0.0F);
 		GlStateManager.rotate(45.0F, 0.0F, 1.0F, 0.0F);
-		float h = MathHelper.sin(g * g * (float) Math.PI);
-		float i = MathHelper.sin(MathHelper.sqrt(g) * (float) Math.PI);
+		float h = Mth.sin(g * g * (float) Math.PI);
+		float i = Mth.sin(Mth.sqrt(g) * (float) Math.PI);
 		GlStateManager.rotate(h * -20.0F, 0.0F, 1.0F, 0.0F);
 		GlStateManager.rotate(i * -20.0F, 0.0F, 0.0F, 1.0F);
 		GlStateManager.rotate(i * -80.0F, 1.0F, 0.0F, 0.0F);
 		GlStateManager.scale(0.4F, 0.4F, 0.4F);
 	}
@@ -250,11 +250,11 @@
 		if (h > 1.0F) {
 			h = 1.0F;
 		}
 
 		if (h > 0.1F) {
-			float i = MathHelper.sin((g - 0.1F) * 1.3F);
+			float i = Mth.sin((g - 0.1F) * 1.3F);
 			float j = h - 0.1F;
 			float k = i * j;
 			GlStateManager.translate(k * 0.0F, k * 0.01F, k * 0.0F);
 		}
 
@@ -461,11 +461,11 @@
 			bl = true;
 		}
 
 		float f = 0.4F;
 		float g = bl ? 0.0F : 1.0F;
-		float h = MathHelper.clamp(g - this.equipProgress, -f, f);
+		float h = Mth.clamp(g - this.equipProgress, -f, f);
 		this.equipProgress += h;
 		if (this.equipProgress < 0.1F) {
 			this.mainHand = itemStack;
 			this.selectedSlot = playerEntity.inventory.selectedSlot;
 		}
