--- GameRenderer.java
+++ GameRenderer.java
@@ -1,12 +1,12 @@
 package net.minecraft.client.render;
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import com.google.gson.JsonSyntaxException;
-import com.mojang.blaze3d.platform.GLX;
-import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.legacy.GLX;
+import com.mojang.blaze3d.platform.legacy.GlStateManager;
 import java.io.IOException;
 import java.nio.FloatBuffer;
 import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Callable;
@@ -50,21 +50,21 @@
 import net.minecraft.util.crash.CrashReportSection;
 import net.minecraft.util.hit.BlockHitResult;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Box;
 import net.minecraft.util.math.Direction;
-import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.Mth;
 import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.World;
 import net.minecraft.world.biome.Biome;
 import net.minecraft.world.level.LevelInfo;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.GL;
 import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GLContext;
 import org.lwjgl.util.glu.Project;
 
 public class GameRenderer implements ResourceReloadListener {
 	private static final Logger LOGGER = LogManager.getLogger();
 	private static final Identifier RAIN_TEXTURE = new Identifier("textures/environment/rain.png");
@@ -161,11 +161,11 @@
 
 		for (int i = 0; i < 32; i++) {
 			for (int j = 0; j < 32; j++) {
 				float f = (float)(j - 16);
 				float g = (float)(i - 16);
-				float h = MathHelper.sqrt(f * f + g * g);
+				float h = Mth.sqrt(f * f + g * g);
 				this.rainOffsetX[i << 5 | j] = -g / h;
 				this.rainOffsetY[i << 5 | j] = f / h;
 			}
 		}
 	}
@@ -458,11 +458,11 @@
 			if (g < 0.0F) {
 				return;
 			}
 
 			g /= (float)livingEntity.maxHurtTime;
-			g = MathHelper.sin(g * g * g * g * (float) Math.PI);
+			g = Mth.sin(g * g * g * g * (float) Math.PI);
 			float h = livingEntity.knockbackVelocity;
 			GlStateManager.rotate(-h, 0.0F, 1.0F, 0.0F);
 			GlStateManager.rotate(-g * 14.0F, 0.0F, 0.0F, 1.0F);
 			GlStateManager.rotate(h, 0.0F, 1.0F, 0.0F);
 		}
@@ -473,13 +473,13 @@
 			PlayerEntity playerEntity = (PlayerEntity)this.client.getCameraEntity();
 			float g = playerEntity.horizontalSpeed - playerEntity.prevHorizontalSpeed;
 			float h = -(playerEntity.horizontalSpeed + g * f);
 			float i = playerEntity.prevStrideDistance + (playerEntity.strideDistance - playerEntity.prevStrideDistance) * f;
 			float j = playerEntity.field_6752 + (playerEntity.field_6753 - playerEntity.field_6752) * f;
-			GlStateManager.translate(MathHelper.sin(h * (float) Math.PI) * i * 0.5F, -Math.abs(MathHelper.cos(h * (float) Math.PI) * i), 0.0F);
-			GlStateManager.rotate(MathHelper.sin(h * (float) Math.PI) * i * 3.0F, 0.0F, 0.0F, 1.0F);
-			GlStateManager.rotate(Math.abs(MathHelper.cos(h * (float) Math.PI - 0.2F) * i) * 5.0F, 1.0F, 0.0F, 0.0F);
+			GlStateManager.translate(Mth.sin(h * (float) Math.PI) * i * 0.5F, -Math.abs(Mth.cos(h * (float) Math.PI) * i), 0.0F);
+			GlStateManager.rotate(Mth.sin(h * (float) Math.PI) * i * 3.0F, 0.0F, 0.0F, 1.0F);
+			GlStateManager.rotate(Math.abs(Mth.cos(h * (float) Math.PI - 0.2F) * i) * 5.0F, 1.0F, 0.0F, 0.0F);
 			GlStateManager.rotate(j, 1.0F, 0.0F, 0.0F);
 		}
 	}
 
 	private void transformCamera(float f) {
@@ -512,13 +512,13 @@
 				float l = entity.pitch;
 				if (this.client.options.perspective == 2) {
 					l += 180.0F;
 				}
 
-				double m = (double)(-MathHelper.sin(k / 180.0F * (float) Math.PI) * MathHelper.cos(l / 180.0F * (float) Math.PI)) * j;
-				double n = (double)(MathHelper.cos(k / 180.0F * (float) Math.PI) * MathHelper.cos(l / 180.0F * (float) Math.PI)) * j;
-				double o = (double)(-MathHelper.sin(l / 180.0F * (float) Math.PI)) * j;
+				double m = (double)(-Mth.sin(k / 180.0F * (float) Math.PI) * Mth.cos(l / 180.0F * (float) Math.PI)) * j;
+				double n = (double)(Mth.cos(k / 180.0F * (float) Math.PI) * Mth.cos(l / 180.0F * (float) Math.PI)) * j;
+				double o = (double)(-Mth.sin(l / 180.0F * (float) Math.PI)) * j;
 
 				for (int p = 0; p < 8; p++) {
 					float q = (float)((p & 1) * 2 - 1);
 					float r = (float)((p >> 1 & 1) * 2 - 1);
 					float s = (float)((p >> 2 & 1) * 2 - 1);
@@ -579,11 +579,11 @@
 		if (this.zoom != 1.0) {
 			GlStateManager.translate((float)this.zoomX, (float)(-this.zoomY), 0.0F);
 			GlStateManager.scale(this.zoom, this.zoom, 1.0);
 		}
 
-		Project.gluPerspective(this.getFov(f, true), (float)this.client.width / (float)this.client.height, 0.05F, this.viewDistance * MathHelper.SQUARE_ROOT_OF_TWO);
+		Project.gluPerspective(this.getFov(f, true), (float)this.client.width / (float)this.client.height, 0.05F, this.viewDistance * Mth.SQUARE_ROOT_OF_TWO);
 		GlStateManager.matrixMode(5888);
 		GlStateManager.loadIdentity();
 		if (this.client.options.anaglyph3d) {
 			GlStateManager.translate((float)(i * 2 - 1) * 0.1F, 0.0F, 0.0F);
 		}
@@ -817,11 +817,11 @@
 		}
 	}
 
 	private float getNightVisionStrength(LivingEntity livingEntity, float f) {
 		int i = livingEntity.getEffectInstance(StatusEffect.NIGHTVISION).getDuration();
-		return i > 200 ? 1.0F : 0.7F + MathHelper.sin(((float)i - f) * (float) Math.PI * 0.2F) * 0.3F;
+		return i > 200 ? 1.0F : 0.7F + Mth.sin(((float)i - f) * (float) Math.PI * 0.2F) * 0.3F;
 	}
 
 	public void render(float f, long l) {
 		boolean bl = Display.isActive();
 		if (!bl && this.client.options.pauseOnLostFocus && (!this.client.options.touchscreen || !Mouse.isButtonDown(1))) {
@@ -925,11 +925,11 @@
 							return GameRenderer.this.client.currentScreen.getClass().getCanonicalName();
 						}
 					});
 					crashReportSection.add("Mouse location", new Callable<String>() {
 						public String call() throws Exception {
-							return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", p, k, Mouse.getX(), Mouse.getY());
+							return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", p, kx, Mouse.getX(), Mouse.getY());
 						}
 					});
 					crashReportSection.add(
 						"Screen size",
 						new Callable<String>() {
@@ -1057,11 +1057,11 @@
 			Project.gluPerspective(this.getFov(f, true), (float)this.client.width / (float)this.client.height, 0.05F, this.viewDistance * 2.0F);
 			GlStateManager.matrixMode(5888);
 			worldRenderer.renderSky(f, i);
 			GlStateManager.matrixMode(5889);
 			GlStateManager.loadIdentity();
-			Project.gluPerspective(this.getFov(f, true), (float)this.client.width / (float)this.client.height, 0.05F, this.viewDistance * MathHelper.SQUARE_ROOT_OF_TWO);
+			Project.gluPerspective(this.getFov(f, true), (float)this.client.width / (float)this.client.height, 0.05F, this.viewDistance * Mth.SQUARE_ROOT_OF_TWO);
 			GlStateManager.matrixMode(5888);
 		}
 
 		this.renderFog(0, f);
 		GlStateManager.shadeModel(7425);
@@ -1188,11 +1188,11 @@
 			worldRenderer.renderClouds(f, i);
 			GlStateManager.disableFog();
 			GlStateManager.popMatrix();
 			GlStateManager.matrixMode(5889);
 			GlStateManager.loadIdentity();
-			Project.gluPerspective(this.getFov(f, true), (float)this.client.width / (float)this.client.height, 0.05F, this.viewDistance * MathHelper.SQUARE_ROOT_OF_TWO);
+			Project.gluPerspective(this.getFov(f, true), (float)this.client.width / (float)this.client.height, 0.05F, this.viewDistance * Mth.SQUARE_ROOT_OF_TWO);
 			GlStateManager.matrixMode(5888);
 		}
 	}
 
 	private void tickRainSplashing() {
@@ -1263,11 +1263,11 @@
 				}
 			}
 
 			if (j > 0 && this.random.nextInt(3) < this.weatherSoundAttempts++) {
 				this.weatherSoundAttempts = 0;
-				if (e > (double)(blockPos.getY() + 1) && world.method_8562(blockPos).getY() > MathHelper.floor((float)blockPos.getY())) {
+				if (e > (double)(blockPos.getY() + 1) && world.method_8562(blockPos).getY() > Mth.floor((float)blockPos.getY())) {
 					this.client.world.playSound(d, e, g, "ambient.weather.rain", 0.1F, 0.5F, false);
 				} else {
 					this.client.world.playSound(d, e, g, "ambient.weather.rain", 0.2F, 1.0F, false);
 				}
 			}
@@ -1278,24 +1278,24 @@
 		float g = this.client.world.getRainGradient(f);
 		if (!(g <= 0.0F)) {
 			this.enableLightmap();
 			Entity entity = this.client.getCameraEntity();
 			World world = this.client.world;
-			int i = MathHelper.floor(entity.x);
-			int j = MathHelper.floor(entity.y);
-			int k = MathHelper.floor(entity.z);
+			int i = Mth.floor(entity.x);
+			int j = Mth.floor(entity.y);
+			int k = Mth.floor(entity.z);
 			Tessellator tessellator = Tessellator.getInstance();
 			BufferBuilder bufferBuilder = tessellator.getBuffer();
 			GlStateManager.disableCull();
 			GL11.glNormal3f(0.0F, 1.0F, 0.0F);
 			GlStateManager.enableBlend();
 			GlStateManager.blendFuncSeparate(770, 771, 1, 0);
 			GlStateManager.alphaFunc(516, 0.1F);
 			double d = entity.prevTickX + (entity.x - entity.prevTickX) * (double)f;
 			double e = entity.prevTickY + (entity.y - entity.prevTickY) * (double)f;
 			double h = entity.prevTickZ + (entity.z - entity.prevTickZ) * (double)f;
-			int l = MathHelper.floor(e);
+			int l = Mth.floor(e);
 			int m = 5;
 			if (this.client.options.fancyGraphics) {
 				m = 10;
 			}
 
@@ -1345,11 +1345,11 @@
 								}
 
 								double z = ((double)(this.ticks + q * q * 3121 + q * 45238971 + p * p * 418711 + p * 13761 & 31) + (double)f) / 32.0 * (3.0 + this.random.nextDouble());
 								double aa = (double)((float)q + 0.5F) - entity.x;
 								double ab = (double)((float)p + 0.5F) - entity.z;
-								float ac = MathHelper.sqrt(aa * aa + ab * ab) / (float)m;
+								float ac = Mth.sqrt(aa * aa + ab * ab) / (float)m;
 								float ad = ((1.0F - ac * ac) * 0.5F + 0.5F) * g;
 								mutable.setPosition(q, x, p);
 								int ae = world.getLight(mutable, 0);
 								int af = ae >> 16 & 65535;
 								int ag = ae & 65535;
@@ -1387,11 +1387,11 @@
 								double z = (double)(((float)(this.ticks & 511) + f) / 512.0F);
 								double aa = this.random.nextDouble() + (double)o * 0.01 * (double)((float)this.random.nextGaussian());
 								double ab = this.random.nextDouble() + (double)(o * (float)this.random.nextGaussian()) * 0.001;
 								double ah = (double)((float)q + 0.5F) - entity.x;
 								double ai = (double)((float)p + 0.5F) - entity.z;
-								float aj = MathHelper.sqrt(ah * ah + ai * ai) / (float)m;
+								float aj = Mth.sqrt(ah * ah + ai * ai) / (float)m;
 								float ak = ((1.0F - aj * aj) * 0.3F + 0.5F) * g;
 								mutable.setPosition(q, x, p);
 								int al = (world.getLight(mutable, 0) * 3 + 15728880) / 4;
 								int am = al >> 16 & 65535;
 								int an = al & 65535;
@@ -1457,11 +1457,11 @@
 		this.fogRed = (float)vec3d2.x;
 		this.fogGreen = (float)vec3d2.y;
 		this.fogBlue = (float)vec3d2.z;
 		if (this.client.options.viewDistance >= 4) {
 			double d = -1.0;
-			Vec3d vec3d3 = MathHelper.sin(world.getSkyAngleRadians(f)) > 0.0F ? new Vec3d(d, 0.0, 0.0) : new Vec3d(1.0, 0.0, 0.0);
+			Vec3d vec3d3 = Mth.sin(world.getSkyAngleRadians(f)) > 0.0F ? new Vec3d(d, 0.0, 0.0) : new Vec3d(1.0, 0.0, 0.0);
 			float k = (float)entity.getRotationVector(f).dotProduct(vec3d3);
 			if (k < 0.0F) {
 				k = 0.0F;
 			}
 
@@ -1582,11 +1582,11 @@
 		boolean bl = false;
 		if (entity instanceof PlayerEntity) {
 			bl = ((PlayerEntity)entity).abilities.creativeMode;
 		}
 
-		GL11.glFog(2918, this.updateFogColorBuffer(this.fogRed, this.fogGreen, this.fogBlue, 1.0F));
+		GL11.glFogfv(2918, this.updateFogColorBuffer(this.fogRed, this.fogGreen, this.fogBlue, 1.0F));
 		GL11.glNormal3f(0.0F, -1.0F, 0.0F);
 		GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
 		Block block = Camera.getSubmergedBlock(this.client.world, entity, f);
 		if (entity instanceof LivingEntity && ((LivingEntity)entity).hasStatusEffect(StatusEffect.BLINDNESS)) {
 			float g = 5.0F;
@@ -1602,11 +1602,11 @@
 			} else {
 				GlStateManager.fogStart(g * 0.25F);
 				GlStateManager.fogEnd(g);
 			}
 
-			if (GLContext.getCapabilities().GL_NV_fog_distance) {
+			if (GL.getCapabilities().GL_NV_fog_distance) {
 				GL11.glFogi(34138, 34139);
 			}
 		} else if (this.thickFog) {
 			GlStateManager.fogMode(2048);
 			GlStateManager.fogDensity(0.1F);
@@ -1629,11 +1629,11 @@
 			} else {
 				GlStateManager.fogStart(gx * 0.75F);
 				GlStateManager.fogEnd(gx);
 			}
 
-			if (GLContext.getCapabilities().GL_NV_fog_distance) {
+			if (GL.getCapabilities().GL_NV_fog_distance) {
 				GL11.glFogi(34138, 34139);
 			}
 
 			if (this.client.world.dimension.isFogThick((int)entity.x, (int)entity.z)) {
 				GlStateManager.fogStart(gx * 0.05F);
