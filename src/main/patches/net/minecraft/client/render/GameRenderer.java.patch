--- GameRenderer.java
+++ GameRenderer.java
@@ -1,12 +1,12 @@
 package net.minecraft.client.render;
 
 import com.google.common.base.Predicate;
 import com.google.common.base.Predicates;
 import com.google.gson.JsonSyntaxException;
-import com.mojang.blaze3d.platform.GLX;
-import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.legacy.GLX;
+import com.mojang.blaze3d.platform.legacy.GlStateManager;
 import java.io.IOException;
 import java.nio.FloatBuffer;
 import java.util.List;
 import java.util.Random;
 import java.util.concurrent.Callable;
@@ -59,12 +59,12 @@
 import net.minecraft.world.level.LevelInfo;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.input.Mouse;
 import org.lwjgl.opengl.Display;
+import org.lwjgl.opengl.GL;
 import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GLContext;
 import org.lwjgl.util.glu.Project;
 
 public class GameRenderer implements ResourceReloadListener {
 	private static final Logger LOGGER = LogManager.getLogger();
 	private static final Identifier RAIN_TEXTURE = new Identifier("textures/environment/rain.png");
@@ -925,11 +925,11 @@
 							return GameRenderer.this.client.currentScreen.getClass().getCanonicalName();
 						}
 					});
 					crashReportSection.add("Mouse location", new Callable<String>() {
 						public String call() throws Exception {
-							return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", p, k, Mouse.getX(), Mouse.getY());
+							return String.format("Scaled: (%d, %d). Absolute: (%d, %d)", p, kx, Mouse.getX(), Mouse.getY());
 						}
 					});
 					crashReportSection.add(
 						"Screen size",
 						new Callable<String>() {
@@ -1582,11 +1582,11 @@
 		boolean bl = false;
 		if (entity instanceof PlayerEntity) {
 			bl = ((PlayerEntity)entity).abilities.creativeMode;
 		}
 
-		GL11.glFog(2918, this.updateFogColorBuffer(this.fogRed, this.fogGreen, this.fogBlue, 1.0F));
+		GL11.glFogfv(2918, this.updateFogColorBuffer(this.fogRed, this.fogGreen, this.fogBlue, 1.0F));
 		GL11.glNormal3f(0.0F, -1.0F, 0.0F);
 		GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
 		Block block = Camera.getSubmergedBlock(this.client.world, entity, f);
 		if (entity instanceof LivingEntity && ((LivingEntity)entity).hasStatusEffect(StatusEffect.BLINDNESS)) {
 			float g = 5.0F;
@@ -1602,11 +1602,11 @@
 			} else {
 				GlStateManager.fogStart(g * 0.25F);
 				GlStateManager.fogEnd(g);
 			}
 
-			if (GLContext.getCapabilities().GL_NV_fog_distance) {
+			if (GL.getCapabilities().GL_NV_fog_distance) {
 				GL11.glFogi(34138, 34139);
 			}
 		} else if (this.thickFog) {
 			GlStateManager.fogMode(2048);
 			GlStateManager.fogDensity(0.1F);
@@ -1629,11 +1629,11 @@
 			} else {
 				GlStateManager.fogStart(gx * 0.75F);
 				GlStateManager.fogEnd(gx);
 			}
 
-			if (GLContext.getCapabilities().GL_NV_fog_distance) {
+			if (GL.getCapabilities().GL_NV_fog_distance) {
 				GL11.glFogi(34138, 34139);
 			}
 
 			if (this.client.world.dimension.isFogThick((int)entity.x, (int)entity.z)) {
 				GlStateManager.fogStart(gx * 0.05F);
