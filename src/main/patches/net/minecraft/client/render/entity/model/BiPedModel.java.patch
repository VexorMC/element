--- BiPedModel.java
+++ BiPedModel.java
@@ -1,11 +1,11 @@
 package net.minecraft.client.render.entity.model;
 
-import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.legacy.GlStateManager;
 import net.minecraft.client.render.model.ModelPart;
 import net.minecraft.entity.Entity;
-import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.Mth;
 
 public class BiPedModel extends EntityModel {
 	public ModelPart head;
 	public ModelPart hat;
 	public ModelPart body;
@@ -92,16 +92,16 @@
 
 	@Override
 	public void setAngles(float f, float g, float h, float i, float j, float k, Entity entity) {
 		this.head.posY = i / (180.0F / (float)Math.PI);
 		this.head.posX = j / (180.0F / (float)Math.PI);
-		this.rightArm.posX = MathHelper.cos(f * 0.6662F + (float) Math.PI) * 2.0F * g * 0.5F;
-		this.leftArm.posX = MathHelper.cos(f * 0.6662F) * 2.0F * g * 0.5F;
+		this.rightArm.posX = Mth.cos(f * 0.6662F + (float) Math.PI) * 2.0F * g * 0.5F;
+		this.leftArm.posX = Mth.cos(f * 0.6662F) * 2.0F * g * 0.5F;
 		this.rightArm.posZ = 0.0F;
 		this.leftArm.posZ = 0.0F;
-		this.rightLeg.posX = MathHelper.cos(f * 0.6662F) * 1.4F * g;
-		this.leftLeg.posX = MathHelper.cos(f * 0.6662F + (float) Math.PI) * 1.4F * g;
+		this.rightLeg.posX = Mth.cos(f * 0.6662F) * 1.4F * g;
+		this.leftLeg.posX = Mth.cos(f * 0.6662F + (float) Math.PI) * 1.4F * g;
 		this.rightLeg.posY = 0.0F;
 		this.leftLeg.posY = 0.0F;
 		if (this.riding) {
 			this.rightArm.posX += (float) (-Math.PI / 5);
 			this.leftArm.posX += (float) (-Math.PI / 5);
@@ -131,27 +131,27 @@
 		}
 
 		this.leftArm.posY = 0.0F;
 		if (this.handSwingProgress > -9990.0F) {
 			float l = this.handSwingProgress;
-			this.body.posY = MathHelper.sin(MathHelper.sqrt(l) * (float) Math.PI * 2.0F) * 0.2F;
-			this.rightArm.pivotZ = MathHelper.sin(this.body.posY) * 5.0F;
-			this.rightArm.pivotX = -MathHelper.cos(this.body.posY) * 5.0F;
-			this.leftArm.pivotZ = -MathHelper.sin(this.body.posY) * 5.0F;
-			this.leftArm.pivotX = MathHelper.cos(this.body.posY) * 5.0F;
+			this.body.posY = Mth.sin(Mth.sqrt(l) * (float) Math.PI * 2.0F) * 0.2F;
+			this.rightArm.pivotZ = Mth.sin(this.body.posY) * 5.0F;
+			this.rightArm.pivotX = -Mth.cos(this.body.posY) * 5.0F;
+			this.leftArm.pivotZ = -Mth.sin(this.body.posY) * 5.0F;
+			this.leftArm.pivotX = Mth.cos(this.body.posY) * 5.0F;
 			this.rightArm.posY = this.rightArm.posY + this.body.posY;
 			this.leftArm.posY = this.leftArm.posY + this.body.posY;
 			this.leftArm.posX = this.leftArm.posX + this.body.posY;
 			l = 1.0F - this.handSwingProgress;
 			l *= l;
 			l *= l;
 			l = 1.0F - l;
-			float m = MathHelper.sin(l * (float) Math.PI);
-			float n = MathHelper.sin(this.handSwingProgress * (float) Math.PI) * -(this.head.posX - 0.7F) * 0.75F;
+			float m = Mth.sin(l * (float) Math.PI);
+			float n = Mth.sin(this.handSwingProgress * (float) Math.PI) * -(this.head.posX - 0.7F) * 0.75F;
 			this.rightArm.posX = (float)((double)this.rightArm.posX - ((double)m * 1.2 + (double)n));
 			this.rightArm.posY = this.rightArm.posY + this.body.posY * 2.0F;
-			this.rightArm.posZ = this.rightArm.posZ + MathHelper.sin(this.handSwingProgress * (float) Math.PI) * -0.4F;
+			this.rightArm.posZ = this.rightArm.posZ + Mth.sin(this.handSwingProgress * (float) Math.PI) * -0.4F;
 		}
 
 		if (this.sneaking) {
 			this.body.posX = 0.5F;
 			this.rightArm.posX += 0.4F;
@@ -168,14 +168,14 @@
 			this.rightLeg.pivotY = 12.0F;
 			this.leftLeg.pivotY = 12.0F;
 			this.head.pivotY = 0.0F;
 		}
 
-		this.rightArm.posZ = this.rightArm.posZ + MathHelper.cos(h * 0.09F) * 0.05F + 0.05F;
-		this.leftArm.posZ = this.leftArm.posZ - (MathHelper.cos(h * 0.09F) * 0.05F + 0.05F);
-		this.rightArm.posX = this.rightArm.posX + MathHelper.sin(h * 0.067F) * 0.05F;
-		this.leftArm.posX = this.leftArm.posX - MathHelper.sin(h * 0.067F) * 0.05F;
+		this.rightArm.posZ = this.rightArm.posZ + Mth.cos(h * 0.09F) * 0.05F + 0.05F;
+		this.leftArm.posZ = this.leftArm.posZ - (Mth.cos(h * 0.09F) * 0.05F + 0.05F);
+		this.rightArm.posX = this.rightArm.posX + Mth.sin(h * 0.067F) * 0.05F;
+		this.leftArm.posX = this.leftArm.posX - Mth.sin(h * 0.067F) * 0.05F;
 		if (this.aiming) {
 			float l = 0.0F;
 			float m = 0.0F;
 			this.rightArm.posZ = 0.0F;
 			this.leftArm.posZ = 0.0F;
@@ -183,14 +183,14 @@
 			this.leftArm.posY = 0.1F - l * 0.6F + this.head.posY + 0.4F;
 			this.rightArm.posX = (float) (-Math.PI / 2) + this.head.posX;
 			this.leftArm.posX = (float) (-Math.PI / 2) + this.head.posX;
 			this.rightArm.posX -= l * 1.2F - m * 0.4F;
 			this.leftArm.posX -= l * 1.2F - m * 0.4F;
-			this.rightArm.posZ = this.rightArm.posZ + MathHelper.cos(h * 0.09F) * 0.05F + 0.05F;
-			this.leftArm.posZ = this.leftArm.posZ - (MathHelper.cos(h * 0.09F) * 0.05F + 0.05F);
-			this.rightArm.posX = this.rightArm.posX + MathHelper.sin(h * 0.067F) * 0.05F;
-			this.leftArm.posX = this.leftArm.posX - MathHelper.sin(h * 0.067F) * 0.05F;
+			this.rightArm.posZ = this.rightArm.posZ + Mth.cos(h * 0.09F) * 0.05F + 0.05F;
+			this.leftArm.posZ = this.leftArm.posZ - (Mth.cos(h * 0.09F) * 0.05F + 0.05F);
+			this.rightArm.posX = this.rightArm.posX + Mth.sin(h * 0.067F) * 0.05F;
+			this.leftArm.posX = this.leftArm.posX - Mth.sin(h * 0.067F) * 0.05F;
 		}
 
 		copyModelPart(this.head, this.hat);
 	}
 
