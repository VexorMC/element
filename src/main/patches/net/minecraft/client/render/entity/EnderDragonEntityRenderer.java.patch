--- EnderDragonEntityRenderer.java
+++ EnderDragonEntityRenderer.java
@@ -1,19 +1,19 @@
 package net.minecraft.client.render.entity;
 
-import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.legacy.GlStateManager;
 import net.minecraft.client.render.BufferBuilder;
 import net.minecraft.client.render.DiffuseLighting;
 import net.minecraft.client.render.Tessellator;
 import net.minecraft.client.render.VertexFormats;
 import net.minecraft.client.render.entity.feature.DragonEyesFeatureRenderer;
 import net.minecraft.client.render.entity.feature.EnderDragonDeathFeature;
 import net.minecraft.client.render.entity.model.EnderDragonModel;
 import net.minecraft.entity.boss.BossBar;
 import net.minecraft.entity.boss.dragon.EnderDragonEntity;
 import net.minecraft.util.Identifier;
-import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.Mth;
 
 public class EnderDragonEntityRenderer extends MobEntityRenderer<EnderDragonEntity> {
 	private static final Identifier CRYSTAL_BEAM_TEXTURE = new Identifier("textures/entity/endercrystal/endercrystal_beam.png");
 	private static final Identifier EXPLOSION_TEXTURE = new Identifier("textures/entity/enderdragon/dragon_exploding.png");
 	private static final Identifier DRAGON_TEXTURE = new Identifier("textures/entity/enderdragon/dragon.png");
@@ -31,11 +31,11 @@
 		GlStateManager.rotate(-i, 0.0F, 1.0F, 0.0F);
 		GlStateManager.rotate(j * 10.0F, 1.0F, 0.0F, 0.0F);
 		GlStateManager.translate(0.0F, 0.0F, 1.0F);
 		if (enderDragonEntity.deathTime > 0) {
 			float k = ((float)enderDragonEntity.deathTime + h - 1.0F) / 20.0F * 1.6F;
-			k = MathHelper.sqrt(k);
+			k = Mth.sqrt(k);
 			if (k > 1.0F) {
 				k = 1.0F;
 			}
 
 			GlStateManager.rotate(k * this.method_5771(enderDragonEntity), 0.0F, 0.0F, 1.0F);
@@ -77,19 +77,19 @@
 		}
 	}
 
 	protected void method_10194(EnderDragonEntity enderDragonEntity, double d, double e, double f, float g) {
 		float h = (float)enderDragonEntity.connectedCrystal.endCrystalAge + g;
-		float i = MathHelper.sin(h * 0.2F) / 2.0F + 0.5F;
+		float i = Mth.sin(h * 0.2F) / 2.0F + 0.5F;
 		i = (i * i + i) * 0.2F;
 		float j = (float)(enderDragonEntity.connectedCrystal.x - enderDragonEntity.x - (enderDragonEntity.prevX - enderDragonEntity.x) * (double)(1.0F - g));
 		float k = (float)(
 			(double)i + enderDragonEntity.connectedCrystal.y - 1.0 - enderDragonEntity.y - (enderDragonEntity.prevY - enderDragonEntity.y) * (double)(1.0F - g)
 		);
 		float l = (float)(enderDragonEntity.connectedCrystal.z - enderDragonEntity.z - (enderDragonEntity.prevZ - enderDragonEntity.z) * (double)(1.0F - g));
-		float m = MathHelper.sqrt(j * j + l * l);
-		float n = MathHelper.sqrt(j * j + k * k + l * l);
+		float m = Mth.sqrt(j * j + l * l);
+		float n = Mth.sqrt(j * j + k * k + l * l);
 		GlStateManager.pushMatrix();
 		GlStateManager.translate((float)d, (float)e + 2.0F, (float)f);
 		GlStateManager.rotate((float)(-Math.atan2((double)l, (double)j)) * 180.0F / (float) Math.PI - 90.0F, 0.0F, 1.0F, 0.0F);
 		GlStateManager.rotate((float)(-Math.atan2((double)m, (double)k)) * 180.0F / (float) Math.PI - 90.0F, 1.0F, 0.0F, 0.0F);
 		Tessellator tessellator = Tessellator.getInstance();
@@ -97,17 +97,17 @@
 		DiffuseLighting.disable();
 		GlStateManager.disableCull();
 		this.bindTexture(CRYSTAL_BEAM_TEXTURE);
 		GlStateManager.shadeModel(7425);
 		float o = 0.0F - ((float)enderDragonEntity.ticksAlive + g) * 0.01F;
-		float p = MathHelper.sqrt(j * j + k * k + l * l) / 32.0F - ((float)enderDragonEntity.ticksAlive + g) * 0.01F;
+		float p = Mth.sqrt(j * j + k * k + l * l) / 32.0F - ((float)enderDragonEntity.ticksAlive + g) * 0.01F;
 		bufferBuilder.begin(5, VertexFormats.POSITION_TEXTURE_COLOR);
 		int q = 8;
 
 		for (int r = 0; r <= 8; r++) {
-			float s = MathHelper.sin((float)(r % 8) * (float) Math.PI * 2.0F / 8.0F) * 0.75F;
-			float t = MathHelper.cos((float)(r % 8) * (float) Math.PI * 2.0F / 8.0F) * 0.75F;
+			float s = Mth.sin((float)(r % 8) * (float) Math.PI * 2.0F / 8.0F) * 0.75F;
+			float t = Mth.cos((float)(r % 8) * (float) Math.PI * 2.0F / 8.0F) * 0.75F;
 			float u = (float)(r % 8) * 1.0F / 8.0F;
 			bufferBuilder.vertex((double)(s * 0.2F), (double)(t * 0.2F), 0.0).texture((double)u, (double)p).color(0, 0, 0, 255).next();
 			bufferBuilder.vertex((double)s, (double)t, (double)n).texture((double)u, (double)o).color(255, 255, 255, 255).next();
 		}
 
