--- ParticleManager.java
+++ ParticleManager.java
@@ -1,10 +1,10 @@
 package net.minecraft.client.particle;
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.legacy.GlStateManager;
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
 import java.util.concurrent.Callable;
 import net.minecraft.block.Block;
@@ -21,11 +21,11 @@
 import net.minecraft.util.crash.CrashException;
 import net.minecraft.util.crash.CrashReport;
 import net.minecraft.util.crash.CrashReportSection;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.Direction;
-import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.Mth;
 import net.minecraft.world.World;
 
 public class ParticleManager {
 	private static final Identifier PARTICLE_TEXTURE = new Identifier("textures/particle/particles.png");
 	protected World world;
@@ -200,11 +200,11 @@
 		Particle.field_1724 = entity.prevTickZ + (entity.z - entity.prevTickZ) * (double)f;
 		GlStateManager.enableBlend();
 		GlStateManager.blendFunc(770, 771);
 		GlStateManager.alphaFunc(516, 0.003921569F);
 
-		for (final int l = 0; l < 3; l++) {
+		for (int l = 0; l < 3; l++) {
 			for (int m = 0; m < 2; m++) {
 				if (!this.particles[l][m].isEmpty()) {
 					switch (m) {
 						case 0:
 							GlStateManager.depthMask(false);
@@ -238,18 +238,19 @@
 							crashReportSection.add("Particle", new Callable<String>() {
 								public String call() throws Exception {
 									return particle.toString();
 								}
 							});
+							int finalL = l;
 							crashReportSection.add("Particle Type", new Callable<String>() {
 								public String call() throws Exception {
-									if (l == 0) {
+									if (finalL == 0) {
 										return "MISC_TEXTURE";
-									} else if (l == 1) {
+									} else if (finalL == 1) {
 										return "TERRAIN_TEXTURE";
 									} else {
-										return l == 3 ? "ENTITY_PARTICLE_TEXTURE" : "Unknown - " + l;
+										return finalL == 3 ? "ENTITY_PARTICLE_TEXTURE" : "Unknown - " + finalL;
 									}
 								}
 							});
 							throw new CrashException(crashReport);
 						}
@@ -265,15 +266,15 @@
 		GlStateManager.alphaFunc(516, 0.1F);
 	}
 
 	public void method_1299(Entity entity, float f) {
 		float g = (float) (Math.PI / 180.0);
-		float h = MathHelper.cos(entity.yaw * (float) (Math.PI / 180.0));
-		float i = MathHelper.sin(entity.yaw * (float) (Math.PI / 180.0));
-		float j = -i * MathHelper.sin(entity.pitch * (float) (Math.PI / 180.0));
-		float k = h * MathHelper.sin(entity.pitch * (float) (Math.PI / 180.0));
-		float l = MathHelper.cos(entity.pitch * (float) (Math.PI / 180.0));
+		float h = Mth.cos(entity.yaw * (float) (Math.PI / 180.0));
+		float i = Mth.sin(entity.yaw * (float) (Math.PI / 180.0));
+		float j = -i * Mth.sin(entity.pitch * (float) (Math.PI / 180.0));
+		float k = h * Mth.sin(entity.pitch * (float) (Math.PI / 180.0));
+		float l = Mth.cos(entity.pitch * (float) (Math.PI / 180.0));
 
 		for (int m = 0; m < 2; m++) {
 			List<Particle> list = this.particles[3][m];
 			if (!list.isEmpty()) {
 				Tessellator tessellator = Tessellator.getInstance();
