--- AbstractTexture.java
+++ AbstractTexture.java
@@ -1,57 +1,89 @@
 package net.minecraft.client.texture;
 
+import com.mojang.blaze3d.opengl.GlTexture;
+import com.mojang.blaze3d.systems.GpuDevice;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.textures.*;
+import org.jetbrains.annotations.Nullable;
 import org.lwjgl.opengl.GL11;
 
 public abstract class AbstractTexture implements Texture {
 	protected int glId = -1;
-	protected boolean bilinear;
-	protected boolean mipmap;
-	protected boolean lastBilinear;
-	protected boolean lastMipmap;
 
+	@Nullable
+	protected GpuTexture texture;
+	@Nullable
+	protected GpuTextureView textureView;
+
+	private boolean lastFilterMode;
+	private boolean lastMipmap;
+
+	public void setClamp(boolean bl) {
+		if (this.texture == null) {
+			throw new IllegalStateException("Texture does not exist, can't change its clamp before something initializes it");
+		} else {
+			this.texture.setAddressMode(bl ? AddressMode.CLAMP_TO_EDGE : AddressMode.REPEAT);
+		}
+	}
+
 	public void setFilter(boolean bl, boolean bl2) {
-		this.bilinear = bl;
-		this.mipmap = bl2;
-		int i = -1;
-		int j = -1;
-		short var6;
-		if (bl) {
-			i = bl2 ? 9987 : 9729;
-			var6 = 9729;
+		if (this.texture == null) {
+			throw new IllegalStateException("Texture does not exist, can't get change its filter before something initializes it");
 		} else {
-			i = bl2 ? 9986 : 9728;
-			var6 = 9728;
+			this.setClamp(true);
+			this.texture.setTextureFilter(bl ? FilterMode.LINEAR : FilterMode.NEAREST, bl2);
 		}
+	}
 
-		GL11.glTexParameteri(3553, 10241, i);
-		GL11.glTexParameteri(3553, 10240, var6);
+	public void setUseMipmaps(boolean bl) {
+		if (this.texture == null) {
+			throw new IllegalStateException("Texture does not exist, can't get change its filter before something initializes it");
+		} else {
+			this.texture.setUseMipmaps(bl);
+		}
 	}
 
 	@Override
 	public void pushFilter(boolean bl, boolean bl2) {
-		this.lastBilinear = this.bilinear;
-		this.lastMipmap = this.mipmap;
+		this.lastFilterMode = this.texture.getMinFilter() == FilterMode.LINEAR ;
+		this.lastMipmap = this.texture.isUseMipmaps();
 		this.setFilter(bl, bl2);
 	}
 
 	@Override
 	public void pop() {
-		this.setFilter(this.lastBilinear, this.lastMipmap);
+		this.setFilter(this.lastFilterMode, this.lastMipmap);
 	}
 
 	@Override
 	public int getGlId() {
-		if (this.glId == -1) {
-			this.glId = TextureUtil.getTexLevelParameter();
+		if (this.texture == null) {
+			GpuDevice gpuDevice = RenderSystem.getDevice();
+			this.texture = gpuDevice.createTexture(this.toString(), 5, TextureFormat.RGBA8, 0, 0, 1, 1);
+			this.textureView = gpuDevice.createTextureView(this.texture);
 		}
-
-		return this.glId;
+		return ((GlTexture)this.texture).glId();
 	}
 
 	public void clearGlId() {
-		if (this.glId != -1) {
-			TextureUtil.deleteTexture(this.glId);
-			this.glId = -1;
+		if (texture != null) {
+			this.texture.close();
 		}
 	}
+
+	public GpuTexture getGpuTexture() {
+		if (this.texture == null) {
+			throw new IllegalStateException("Texture does not exist, can't get it before something initializes it");
+		} else {
+			return this.texture;
+		}
+	}
+
+	public GpuTextureView getTextureView() {
+		if (this.textureView == null) {
+			throw new IllegalStateException("Texture view does not exist, can't get it before something initializes it");
+		} else {
+			return this.textureView;
+		}
+	}
 }
