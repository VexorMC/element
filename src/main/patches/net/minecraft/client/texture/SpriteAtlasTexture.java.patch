--- SpriteAtlasTexture.java
+++ SpriteAtlasTexture.java
@@ -2,14 +2,21 @@
 
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import java.awt.image.BufferedImage;
 import java.io.IOException;
+import java.nio.IntBuffer;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
 import java.util.concurrent.Callable;
+
+import com.mojang.blaze3d.platform.NativeImage;
+import com.mojang.blaze3d.systems.CommandEncoder;
+import com.mojang.blaze3d.systems.GpuDevice;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.textures.TextureFormat;
 import net.minecraft.client.MinecraftClient;
 import net.minecraft.client.render.TextureStitchException;
 import net.minecraft.client.render.TextureStitcher;
 import net.minecraft.client.resource.AnimationMetadata;
 import net.minecraft.client.resource.metadata.TextureResourceMetadata;
@@ -20,10 +27,11 @@
 import net.minecraft.util.crash.CrashReport;
 import net.minecraft.util.crash.CrashReportSection;
 import net.minecraft.util.math.MathHelper;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.lwjgl.BufferUtils;
 
 public class SpriteAtlasTexture extends AbstractTexture implements TickableTexture {
 	private static final Logger LOGGER = LogManager.getLogger();
 	public static final Identifier MISSING = new Identifier("missingno");
 	public static final Identifier BLOCK_ATLAS_TEX = new Identifier("textures/atlas/blocks.png");
@@ -53,20 +61,24 @@
 		this.texture.setFrames(Lists.newArrayList(new int[][][]{js}));
 	}
 
 	@Override
 	public void load(ResourceManager resourceManager) throws IOException {
+		System.out.println("loading!");
 		if (this.textureCreator != null) {
+			System.out.println("not null!");
 			this.method_10315(resourceManager, this.textureCreator);
 		}
 	}
 
 	public void method_10315(ResourceManager resourceManager, TextureCreator textureCreator) {
 		this.spritesToLoad.clear();
+		System.out.println("creating!");
 		textureCreator.create(this);
 		this.method_5829();
 		this.clearGlId();
+		System.out.println("uploading!");
 		this.method_7005(resourceManager);
 	}
 
 	public void method_7005(ResourceManager resourceManager) {
 		int i = MinecraftClient.getMaxTextureSize();
@@ -121,12 +133,12 @@
 
 			j = Math.min(j, Math.min(sprite.getWidth(), sprite.getHeight()));
 			int n = Math.min(Integer.lowestOneBit(sprite.getWidth()), Integer.lowestOneBit(sprite.getHeight()));
 			if (n < k) {
 				LOGGER.warn(
-					"Texture {} with size {}x{} limits mip level from {} to {}",
-					new Object[]{identifier2, sprite.getWidth(), sprite.getHeight(), MathHelper.log2(k), MathHelper.log2(n)}
+						"Texture {} with size {}x{} limits mip level from {} to {}",
+						new Object[]{identifier2, sprite.getWidth(), sprite.getHeight(), MathHelper.log2(k), MathHelper.log2(n)}
 				);
 				k = n;
 			}
 
 			textureStitcher.add(sprite);
@@ -173,20 +185,51 @@
 		} catch (TextureStitchException var20) {
 			throw var20;
 		}
 
 		LOGGER.info("Created: {}x{} {}-atlas", new Object[]{textureStitcher.getWidth(), textureStitcher.getHeight(), this.name});
-		TextureUtil.prepareImage(this.getGlId(), this.maxTextureSize, textureStitcher.getWidth(), textureStitcher.getHeight());
+		GpuDevice gpuDevice = RenderSystem.getDevice();
+		super.texture = gpuDevice.createTexture("SpriteAtlasTexture", 5, TextureFormat.RGBA8, textureStitcher.getWidth(), textureStitcher.getHeight(), 1, 5);
+		this.textureView = gpuDevice.createTextureView(super.texture);
 		Map<String, Sprite> map = Maps.newHashMap(this.spritesToLoad);
 
 		for (Sprite sprite3 : textureStitcher.getStitchedSprites()) {
 			String string = sprite3.getName();
 			map.remove(string);
 			this.sprites.put(string, sprite3);
 
 			try {
-				TextureUtil.method_7027(sprite3.method_5831(0), sprite3.getWidth(), sprite3.getHeight(), sprite3.getX(), sprite3.getY(), false, false);
+				CommandEncoder encoder = gpuDevice.createCommandEncoder();
+				int[][] mipmaps = sprite3.method_5831(0);
+				int baseWidth = sprite3.getWidth();
+				int baseHeight = sprite3.getHeight();
+				int xOffset = sprite3.getX();
+				int yOffset = sprite3.getY();
+				NativeImage.Format format = NativeImage.Format.BGRA;
+
+				for (int mipLevel = 0; mipLevel < mipmaps.length; mipLevel++) {
+					int[] pixels = mipmaps[mipLevel];
+					int width = baseWidth >> mipLevel;
+					int height = baseHeight >> mipLevel;
+
+					if (width == 0 || height == 0) break;
+
+					IntBuffer buffer = BufferUtils.createIntBuffer(pixels.length);
+					buffer.put(pixels);
+					buffer.flip();
+					encoder.writeToTexture(
+							super.texture,
+							buffer,
+							format,
+							mipLevel,
+							0, // depth or array layer
+							xOffset >> mipLevel,
+							yOffset >> mipLevel,
+							width,
+							height
+					);
+				}
 			} catch (Throwable var19) {
 				CrashReport crashReport2 = CrashReport.create(var19, "Stitching texture atlas");
 				CrashReportSection crashReportSection2 = crashReport2.addElement("Texture being stitched together");
 				crashReportSection2.add("Atlas path", this.name);
 				crashReportSection2.add("Sprite", sprite3);
@@ -203,12 +246,12 @@
 		}
 	}
 
 	private Identifier method_7003(Identifier identifier, int i) {
 		return i == 0
-			? new Identifier(identifier.getNamespace(), String.format("%s/%s%s", this.name, identifier.getPath(), ".png"))
-			: new Identifier(identifier.getNamespace(), String.format("%s/mipmaps/%s.%d%s", this.name, identifier.getPath(), i, ".png"));
+				? new Identifier(identifier.getNamespace(), String.format("%s/%s%s", this.name, identifier.getPath(), ".png"))
+				: new Identifier(identifier.getNamespace(), String.format("%s/mipmaps/%s.%d%s", this.name, identifier.getPath(), i, ".png"));
 	}
 
 	public Sprite getSprite(String string) {
 		Sprite sprite = (Sprite)this.sprites.get(string);
 		if (sprite == null) {
