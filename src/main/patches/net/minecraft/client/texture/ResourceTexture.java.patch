--- ResourceTexture.java
+++ ResourceTexture.java
@@ -1,10 +1,15 @@
 package net.minecraft.client.texture;
 
 import java.awt.image.BufferedImage;
 import java.io.IOException;
 import java.io.InputStream;
+
+import com.mojang.blaze3d.platform.NativeImage;
+import com.mojang.blaze3d.systems.GpuDevice;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.textures.TextureFormat;
 import net.minecraft.client.resource.metadata.TextureResourceMetadata;
 import net.minecraft.resource.Resource;
 import net.minecraft.resource.ResourceManager;
 import net.minecraft.util.Identifier;
 import org.apache.logging.log4j.LogManager;
@@ -19,31 +24,37 @@
 	}
 
 	@Override
 	public void load(ResourceManager resourceManager) throws IOException {
 		this.clearGlId();
+
 		InputStream inputStream = null;
 
 		try {
 			Resource resource = resourceManager.getResource(this.field_6555);
 			inputStream = resource.getInputStream();
-			BufferedImage bufferedImage = TextureUtil.create(inputStream);
+			NativeImage nativeImage = NativeImage.read(inputStream);
 			boolean bl = false;
 			boolean bl2 = false;
 			if (resource.hasMetadata()) {
 				try {
 					TextureResourceMetadata textureResourceMetadata = resource.getMetadata("texture");
 					if (textureResourceMetadata != null) {
 						bl = textureResourceMetadata.method_5980();
 						bl2 = textureResourceMetadata.method_5981();
 					}
 				} catch (RuntimeException var11) {
-					LOGGER.warn("Failed reading metadata of: " + this.field_6555, var11);
+                    LOGGER.warn("Failed reading metadata of: {}", this.field_6555, var11);
 				}
 			}
 
-			TextureUtil.method_5860(this.getGlId(), bufferedImage, bl, bl2);
+			GpuDevice gpuDevice = RenderSystem.getDevice();
+			this.texture = gpuDevice.createTexture(this.field_6555::toString, 5, TextureFormat.RGBA8, nativeImage.getWidth(), nativeImage.getHeight(), 1, 1);
+			this.textureView = gpuDevice.createTextureView(this.texture);
+			this.setFilter(bl, false);
+			this.setClamp(bl2);
+			gpuDevice.createCommandEncoder().writeToTexture(this.texture, nativeImage);
 		} finally {
 			if (inputStream != null) {
 				inputStream.close();
 			}
 		}
