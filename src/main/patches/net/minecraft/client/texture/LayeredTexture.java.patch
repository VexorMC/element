--- LayeredTexture.java
+++ LayeredTexture.java
@@ -1,16 +1,24 @@
 package net.minecraft.client.texture;
 
 import com.google.common.collect.Lists;
-import java.awt.image.BufferedImage;
+
+import java.awt.image.*;
 import java.io.IOException;
 import java.io.InputStream;
+import java.nio.ByteBuffer;
 import java.util.List;
+
+import com.mojang.blaze3d.platform.NativeImage;
+import com.mojang.blaze3d.systems.GpuDevice;
+import com.mojang.blaze3d.systems.RenderSystem;
+import com.mojang.blaze3d.textures.TextureFormat;
 import net.minecraft.resource.ResourceManager;
 import net.minecraft.util.Identifier;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
+import org.lwjgl.BufferUtils;
 
 public class LayeredTexture extends AbstractTexture {
 	private static final Logger LOGGER = LogManager.getLogger();
 	public final List<String> locations;
 
@@ -38,8 +46,34 @@
 		} catch (IOException var7) {
 			LOGGER.error("Couldn't load layered image", var7);
 			return;
 		}
 
-		TextureUtil.method_5858(this.getGlId(), bufferedImage);
+		ByteBuffer byteBuffer;
+		DataBuffer dataBuffer = bufferedImage.getRaster().getDataBuffer();
+
+		if (dataBuffer instanceof DataBufferByte) {
+			byte[] pixelData = ((DataBufferByte) dataBuffer).getData();
+			byteBuffer = BufferUtils.createByteBuffer(pixelData.length).put(pixelData).flip();
+		} else if (dataBuffer instanceof DataBufferUShort) {
+			short[] pixelData = ((DataBufferUShort) dataBuffer).getData();
+			byteBuffer = ByteBuffer.allocate(pixelData.length * 2);
+			byteBuffer.asShortBuffer().put(BufferUtils.createShortBuffer(pixelData.length).put(pixelData).flip());
+		} else if (dataBuffer instanceof DataBufferShort) {
+			short[] pixelData = ((DataBufferShort) dataBuffer).getData();
+			byteBuffer = ByteBuffer.allocate(pixelData.length * 2);
+			byteBuffer.asShortBuffer().put(BufferUtils.createShortBuffer(pixelData.length).put(pixelData).flip());
+		} else if (dataBuffer instanceof DataBufferInt) {
+			int[] pixelData = ((DataBufferInt) dataBuffer).getData();
+			byteBuffer = ByteBuffer.allocate(pixelData.length * 4);
+			byteBuffer.asIntBuffer().put(BufferUtils.createIntBuffer(pixelData.length).put(pixelData).flip());
+		} else {
+			throw new IllegalArgumentException("Not implemented for data buffer type: " + dataBuffer.getClass());
+		}
+
+
+		GpuDevice gpuDevice = RenderSystem.getDevice();
+		this.texture = gpuDevice.createTexture(this.locations::toString, 5, TextureFormat.RGBA8, bufferedImage.getWidth(), bufferedImage.getHeight(), 1, 1);
+		this.textureView = gpuDevice.createTextureView(this.texture);
+		gpuDevice.createCommandEncoder().writeToTexture(this.texture, NativeImage.read(byteBuffer));
 	}
 }
