--- InGameHud.java
+++ InGameHud.java
@@ -1,11 +1,11 @@
 package net.minecraft.client.gui.hud;
 
 import com.google.common.base.Predicate;
 import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
-import com.mojang.blaze3d.platform.GlStateManager;
+import com.mojang.blaze3d.platform.legacy.GlStateManager;
 import java.util.Collection;
 import java.util.List;
 import java.util.Random;
 import net.minecraft.block.Blocks;
 import net.minecraft.block.material.Material;
@@ -40,11 +40,11 @@
 import net.minecraft.util.ChatUtil;
 import net.minecraft.util.Formatting;
 import net.minecraft.util.Identifier;
 import net.minecraft.util.hit.BlockHitResult;
 import net.minecraft.util.math.BlockPos;
-import net.minecraft.util.math.MathHelper;
+import net.minecraft.util.Mth;
 import net.minecraft.world.border.WorldBorder;
 
 public class InGameHud extends DrawableHelper {
 	private static final Identifier VIGNETTE = new Identifier("textures/misc/vignette.png");
 	private static final Identifier WIDGETS = new Identifier("textures/gui/widgets.png");
@@ -192,11 +192,11 @@
 				GlStateManager.translate((float)(i / 2), (float)(j - 68), 0.0F);
 				GlStateManager.enableBlend();
 				GlStateManager.blendFuncSeparate(770, 771, 1, 0);
 				int m = 16777215;
 				if (this.overlayTinted) {
-					m = MathHelper.hsvToRgb(h / 50.0F, 0.7F, 0.6F) & 16777215;
+					m = Mth.hsvToRgb(h / 50.0F, 0.7F, 0.6F) & 16777215;
 				}
 
 				this.getFontRenderer().draw(this.overlayMessage, -this.getFontRenderer().getStringWidth(this.overlayMessage) / 2, -4, m + (l << 24 & 0xFF000000));
 				GlStateManager.disableBlend();
 				GlStateManager.popMatrix();
@@ -216,11 +216,11 @@
 
 			if (this.titleTotalTicks <= this.titleFadeOutTicks) {
 				lx = (int)(hx * 255.0F / (float)this.titleFadeOutTicks);
 			}
 
-			lx = MathHelper.clamp(lx, 0, 255);
+			lx = Mth.clamp(lx, 0, 255);
 			if (lx > 8) {
 				GlStateManager.pushMatrix();
 				GlStateManager.translate((float)(i / 2), (float)(j / 2), 0.0F);
 				GlStateManager.enableBlend();
 				GlStateManager.blendFuncSeparate(770, 771, 1, 0);
@@ -471,11 +471,11 @@
 	}
 
 	private void renderStatusBars(Window window) {
 		if (this.client.getCameraEntity() instanceof PlayerEntity) {
 			PlayerEntity playerEntity = (PlayerEntity)this.client.getCameraEntity();
-			int i = MathHelper.ceil(playerEntity.getHealth());
+			int i = Mth.ceil(playerEntity.getHealth());
 			boolean bl = this.heartJumpEndTick > (long)this.ticks && (this.heartJumpEndTick - (long)this.ticks) / 3L % 2L == 1L;
 			if (i < this.renderHealthValue && playerEntity.timeUntilRegen > 0) {
 				this.lastHealthCheckTime = MinecraftClient.getTime();
 				this.heartJumpEndTick = (long)(this.ticks + 20);
 			} else if (i > this.renderHealthValue && playerEntity.timeUntilRegen > 0) {
@@ -500,18 +500,18 @@
 			int m = window.getWidth() / 2 - 91;
 			int n = window.getWidth() / 2 + 91;
 			int o = window.getHeight() - 39;
 			float f = (float)entityAttributeInstance.getValue();
 			float g = playerEntity.getAbsorption();
-			int p = MathHelper.ceil((f + g) / 2.0F / 10.0F);
+			int p = Mth.ceil((f + g) / 2.0F / 10.0F);
 			int q = Math.max(10 - (p - 2), 3);
 			int r = o - (p - 1) * q - 10;
 			float h = g;
 			int s = playerEntity.getArmorProtectionValue();
 			int t = -1;
 			if (playerEntity.hasStatusEffect(StatusEffect.REGENERATION)) {
-				t = this.ticks % MathHelper.ceil(f + 5.0F);
+				t = this.ticks % Mth.ceil(f + 5.0F);
 			}
 
 			this.client.profiler.push("armor");
 
 			for (int u = 0; u < 10; u++) {
@@ -531,11 +531,11 @@
 				}
 			}
 
 			this.client.profiler.swap("health");
 
-			for (int ux = MathHelper.ceil((f + g) / 2.0F) - 1; ux >= 0; ux--) {
+			for (int ux = Mth.ceil((f + g) / 2.0F) - 1; ux >= 0; ux--) {
 				int vx = 16;
 				if (playerEntity.hasStatusEffect(StatusEffect.POISON)) {
 					vx += 36;
 				} else if (playerEntity.hasStatusEffect(StatusEffect.WITHER)) {
 					vx += 72;
@@ -544,11 +544,11 @@
 				int w = 0;
 				if (bl) {
 					w = 1;
 				}
 
-				int x = MathHelper.ceil((float)(ux + 1) / 10.0F) - 1;
+				int x = Mth.ceil((float)(ux + 1) / 10.0F) - 1;
 				int y = m + ux % 10 * 8;
 				int z = o - x * q;
 				if (i <= 4) {
 					z += this.random.nextInt(2);
 				}
@@ -672,12 +672,12 @@
 			}
 
 			this.client.profiler.swap("air");
 			if (playerEntity.isSubmergedIn(Material.WATER)) {
 				int vxx = this.client.player.getAir();
-				int wxx = MathHelper.ceil((double)(vxx - 2) * 10.0 / 300.0);
-				int xxx = MathHelper.ceil((double)vxx * 10.0 / 300.0) - wxx;
+				int wxx = Mth.ceil((double)(vxx - 2) * 10.0 / 300.0);
+				int xxx = Mth.ceil((double)vxx * 10.0 / 300.0) - wxx;
 
 				for (int yxx = 0; yxx < wxx + xxx; yxx++) {
 					if (yxx < wxx) {
 						this.drawTexture(n - yxx * 8 - 9, r, 16, 18, 9, 9);
 					} else {
@@ -734,11 +734,11 @@
 		GlStateManager.color(1.0F, 1.0F, 1.0F, 1.0F);
 	}
 
 	private void renderVignetteOverlay(float f, Window window) {
 		f = 1.0F - f;
-		f = MathHelper.clamp(f, 0.0F, 1.0F);
+		f = Mth.clamp(f, 0.0F, 1.0F);
 		WorldBorder worldBorder = this.client.world.getWorldBorder();
 		float g = (float)worldBorder.getDistanceInsideBorder(this.client.player);
 		double d = Math.min(
 			worldBorder.getShrinkingSpeed() * (double)worldBorder.getWarningTime() * 1000.0, Math.abs(worldBorder.getTargetSize() - worldBorder.getOldSize())
 		);
