--- TwitchErrorScreen.java
+++ TwitchErrorScreen.java
@@ -15,11 +15,11 @@
 import net.minecraft.text.TranslatableText;
 import net.minecraft.util.Util;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.lwjgl.opengl.GL11;
-import org.lwjgl.opengl.GLContext;
+import org.lwjgl.opengl.GL;
 import tv.twitch.ErrorCode;
 
 public class TwitchErrorScreen extends Screen {
 	private static final Logger LOGGER = LogManager.getLogger();
 	private final Text unavailableText = new TranslatableText("stream.unavailable.title");
@@ -120,13 +120,13 @@
 		MinecraftClient minecraftClient = MinecraftClient.getInstance();
 		TwitchStreamProvider twitchStreamProvider = minecraftClient.getTwitchStreamProvider();
 		if (!GLX.advanced) {
 			List<TranslatableText> list = Lists.newArrayList();
 			list.add(new TranslatableText("stream.unavailable.no_fbo.version", GL11.glGetString(7938)));
-			list.add(new TranslatableText("stream.unavailable.no_fbo.blend", GLContext.getCapabilities().GL_EXT_blend_func_separate));
-			list.add(new TranslatableText("stream.unavailable.no_fbo.arb", GLContext.getCapabilities().GL_ARB_framebuffer_object));
-			list.add(new TranslatableText("stream.unavailable.no_fbo.ext", GLContext.getCapabilities().GL_EXT_framebuffer_object));
+			list.add(new TranslatableText("stream.unavailable.no_fbo.blend", GL.getCapabilities().GL_EXT_blend_func_separate));
+			list.add(new TranslatableText("stream.unavailable.no_fbo.arb", GL.getCapabilities().GL_ARB_framebuffer_object));
+			list.add(new TranslatableText("stream.unavailable.no_fbo.ext", GL.getCapabilities().GL_EXT_framebuffer_object));
 			minecraftClient.setScreen(new TwitchErrorScreen(screen, TwitchErrorScreen.ErrorCause.NO_FBO, list));
 		} else if (twitchStreamProvider instanceof NullTwitchStream) {
 			if (((NullTwitchStream)twitchStreamProvider).getThrowable().getMessage().contains("Can't load AMD 64-bit .dll on a IA 32-bit platform")) {
 				minecraftClient.setScreen(new TwitchErrorScreen(screen, TwitchErrorScreen.ErrorCause.LIBRARY_ARCH_MISMATCH));
 			} else {
